\input texinfo.tex
@c %**start of header
@setfilename mmux-cc-libc.info
@settitle MMUX CC Types
@c %**end of header

@c @include version.texi
@include mmux-version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX CC Libc

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX CC Libc

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-cc-libc

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_CC_LIBC
@set PackagePkgconfigModule             mmux-cc-libc
@set PackageLibsVar                     @env{MMUX_CC_LIBC_LIBS}
@set PackageCflagsVar                   @env{MMUX_CC_LIBC_CFLAGS}
@c This is the stem of the library in "libmmux-cc-libc.so".
@set PackageLibstem                     mmux-cc-libc
@set PackageApiPrefixLower              mmux_
@set PackageApiPrefixUpper              MMUX_

@set PackageHeader                      mmux-cc-libc.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@ifinfo
@macro mmux{}
@acronym{MMUX}
@end macro
@end ifinfo
@ifnotinfo
@macro mmux{}
@acronym{mmux}
@end macro
@end ifnotinfo

@macro mmuxcctypesref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,mmux-cc-types}
@end macro

@macro MmuxCFuncpage{FUNCNAME}
@ref{\FUNCNAME\,\FUNCNAME\,\FUNCNAME\,*manpages*}
@end macro

@macro MmuxCStruct{NAME}
@code{struct \NAME\}
@end macro

@macro MmuxCInterface{FUNCNAME}
Interface to the function @cfunc{\FUNCNAME\}, @MmuxCFuncpage{\FUNCNAME\}
@end macro

@c ------------------------------------------------------------------------

@macro MmuxCStructOpaqueTypedef{STRUCTNAME}
@deftp {Opaque Struct Typedef} mmux_libc_\STRUCTNAME\_t
An alias for @MmuxCStruct{\STRUCTNAME\}.
@end deftp

@end macro

@macro MmuxSetterGetter{STRUCTNAME, FIELDNAME, FIELDTYPE}
@deftypefun void mmux_libc_\FIELDNAME\_set (mmux_libc_\STRUCTNAME\_t * @var{\STRUCTNAME\_p}, \FIELDTYPE\ @var{\FIELDNAME\})
@deftypefunx \FIELDTYPE\ mmux_libc_\FIELDNAME\_ref (mmux_libc_\STRUCTNAME\_t const * @var{\STRUCTNAME\_p})
Setter and getter for the field @code{\FIELDNAME\} of @objtype{mmux_libc_\STRUCTNAME\_t}.
@end deftypefun

@end macro

@macro MmuxStructDumper{STRUCTNAME}
@deftypefun bool mmux_libc_\STRUCTNAME\_dump (mmux_libc_file_descriptor_t @var{fd}, mmux_libc_\STRUCTNAME\_t const * @var{struct_p}, char const * @var{struct_name})
Write to @var{fd} a description of the fields of the @MmuxCStruct{\STRUCTNAME\} referenced by
@var{struct_p}.  @var{struct_name} must be a pointer to an @asciiz{} string representing the name of
the data structure used in the description; when @cnull{}: it defaults to @samp{struct
\STRUCTNAME\}.
@end deftypefun

@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{MmuxPkgSemanticVersion} of @value{PACKAGE}, a C11 language
library implementing a wrapper to the @gnu{} C Library that makes it easier to interface it to
high--level platforms.

The package targets @posix{} platforms.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

Development of this package takes place at:

@center @value{GithubUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{MmuxPkgSemanticVersion}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-cc-libc: (mmux-cc-libc).       C11 language library wrapper for the @gnu{} C Library.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* initialisation::              Library initialisation.
* memory::                      Memory management.
* time::                        Times and dates.
* system::                      System configuration.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{MmuxPkgSemanticVersion} of @value{PACKAGE}, a C11 language
library meant to be used in foreign functions interfaces for higher--level languages.

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
@value{PACKAGE} installs multiple header files, of which @value{PackageHeaderFile} is the main one,
exporting the whole library @api{}.  All the function names in the @api{} are prefixed with
@code{@value{PackageApiPrefixLower}}; all the preprocessor symbol names are prefixed with
@code{@value{PackageApiPrefixUpper}}; all the type names are prefixed with
@code{@value{PackageApiPrefixLower}} and suffixed with @code{_t}.

The library is installed under @code{$libdir}; for example:

@example
/usr/local/lib64/lib@value{PackageLibstem}.so
@end example

@noindent
C language header files are installed under @code{$includedir}, for example:

@example
/usr/local/include/@value{PackageHeaderFile}
@end example

@menu
* overview stems::              Specifying C language types with their stem.
* overview errors::             Error handling.
* overview results::            Results handling.
* overview linking::            Linking code with the shared library.
@end menu

@c page
@node overview stems
@section Specifying C language types with their stem


@value{PACKAGE} uses the type definitions of the external package @emph{@mmux{} CC Types},
@mmuxcctypesref{overview stems, Specifying C language types with their stem}.

@c page
@node overview errors
@section Error handling


Unless otherwise specified, the functions that can fail return a @objtype{bool} value: @cfalse{}
when successful; @ctrue{} when an error occurs.

@c page
@node overview results
@section Results handling


Unless otherwise specified, if the first argument of a function is a pointer named @var{result_p}:
the function will store in the referenced location the result of the call.

For example, we can write:

@example
mmux_slong_t    result;

if (mmux_libc_sysconf(&result, MMUX_LIBC__SC_PAGESIZE)) @{
  /* error */
@}
/* the result is in "result" */
@end example

@c page

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_cc_libc_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_cc_libc_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_cc_libc_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_cc_libc_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node initialisation
@chapter Library initialisation


@deftypefun bool mmux_cc_libc_init (void)
Initialise library's internal state; we can safely call this function multimple times.  When
successful return @cfalse{}; otherwise return @ctrue{}.
@end deftypefun

@c page
@node memory
@chapter Memory management


@menu
* memory allocation::           Memory allocation.
* memory operations::           Memory operations.
@end menu

@c page
@node memory allocation
@section Memory allocation


@deftypefn {Preprocessor Macro} bool mmux_libc_malloc (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{len})
@deftypefnx {Function} bool mmux_libc_malloc_ (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{len})
@MmuxCInterface{malloc}.  The macro just casts a pointer @var{P_p} of any type to @code{mmux_pointer_t
*}.  Upon successful return: the pointer variable referenced by @var{P_p} is set to the pointer
referencing the newly allocated memory block.

@example
mmux_libc_tm_t *  tm;

if (mmux_libc_malloc(&tm, sizeof(mmux_libc_tm_t))) @{
  /* error */
@}
@end example
@end deftypefn


@deftypefn {Preprocessor Macro} bool mmux_libc_calloc (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{item_num}, mmux_usize_t @var{item_len})
@deftypefnx Function bool mmux_libc_calloc_ (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{item_num}, mmux_usize_t @var{item_len})
@MmuxCInterface{calloc}.  The macro just casts a pointer @var{P_p} of any type to @code{mmux_pointer_t
*}.  Upon successful return: the pointer variable referenced by @var{P_p} is set to the pointer
referencing the newly allocated memory block.

@example
mmux_double_t *  P;

if (mmux_libc_calloc(&P, 123, sizeof(mmux_double_t))) @{
  /* error */
@}
@end example
@end deftypefn


@deftypefn {Preprocessor Macro} bool mmux_libc_realloc (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{newlen})
@deftypefnx Function bool mmux_libc_realloc_ (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{newlen})
@MmuxCInterface{realloc}.  The macro just casts a pointer @var{P_p} of any type to @code{mmux_pointer_t
*}.

@itemize
@item
Upon calling this function: @var{P_p} must reference a pointer variable holding the pointer to the
memory block to reallocate.

@item
Upon successfully returning from this function: the pointer variable referenced by @var{P_p} holds
the new pointer.
@end itemize

@example
mmux_libc_tm_t *  tm;

if (mmux_libc_malloc(&tm, 1024)) @{
  /* error */
@}
if (mmux_libc_realloc(&tm, 4096)) @{
  /* error */
@}
@end example
@end deftypefn


@deftypefn {Preprocessor Macro} bool mmux_libc_reallocarray (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{item_num}, mmux_usize_t @var{item_len})
@deftypefnx Function bool mmux_libc_reallocarray_ (mmux_pointer_t * @var{P_p}, mmux_usize_t @var{item_num}, mmux_usize_t @var{item_len})
@MmuxCInterface{reallocarray}.  The macro just casts a pointer @var{P_p} of any type to
@code{mmux_pointer_t *}.  Upon successful return: the pointer variable referenced by @var{P_p} is
set to the pointer referencing the newly allocated memory block.

@example
mmux_double_t *  P;

if (mmux_libc_calloc(&P, 123, sizeof(mmux_double_t))) @{
  /* error */
@}
if (mmux_libc_reallocarray(&P, 456, sizeof(mmux_double_t))) @{
  /* error */
@}
@end example
@end deftypefn


@deftypefun void mmux_libc_free (mmux_pointer_t @var{P})
@MmuxCInterface{free}.
@end deftypefun

@c page
@node memory operations
@section Memory operations


@deftypefun void mmux_libc_memset (mmux_pointer_t ptr, mmux_uint8_t octet, mmux_usize_t @var{nbytes})
@MmuxCInterface{memset}.
@end deftypefun


@deftypefun void mmux_libc_memzero (mmux_pointer_t ptr, mmux_usize_t @var{nbytes})
@MmuxCInterface{memzero}.
@end deftypefun


@deftypefun void mmux_libc_memcpy (mmux_pointer_t dst_ptr, mmux_pointer_t src_ptr, mmux_usize_t @var{nbytes})
@MmuxCInterface{memcpy}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_mempcpy (mmux_pointer_t dst_ptr, mmux_pointer_t src_ptr, mmux_usize_t @var{nbytes})
@MmuxCInterface{mempcpy}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_memccpy (mmux_pointer_t dst_ptr, mmux_pointer_t src_ptr, mmux_uint8_t octet, mmux_usize_t @var{nbytes})
@MmuxCInterface{memccpy}.
@end deftypefun


@deftypefun void mmux_libc_memmove (mmux_pointer_t dst_ptr, mmux_pointer_t src_ptr, mmux_usize_t @var{nbytes})
@MmuxCInterface{memmove}.
@end deftypefun


@deftypefun mmux_sint_t mmux_libc_memcmp (mmux_pointer_t dst_ptr, mmux_pointer_t src_ptr, mmux_usize_t @var{nbytes})
@MmuxCInterface{memcmp}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_memchr (mmux_pointer_t ptr, mmux_octet_t octet, mmux_usize_t @var{nbytes})
@MmuxCInterface{memchr}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_rawmemchr (mmux_pointer_t ptr, mmux_octet_t octet)
@MmuxCInterface{rawmemchr}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_memrchr (mmux_pointer_t ptr, mmux_octet_t octet, mmux_usize_t @var{nbytes})
@MmuxCInterface{memrchr}.
@end deftypefun


@deftypefun mmux_pointer_t mmux_libc_memmem (mmux_pointer_t haystack_ptr, mmux_usize_t haystack_len, mmux_pointer_t needle_ptr, mmux_usize_t needle_len)
@MmuxCInterface{memmem}.
@end deftypefun


@c page
@node time
@chapter Times and dates


@menu
* time timeval::                The @objtype{mmux_libc_timeval_t} type.
* time timespec::               The @objtype{mmux_libc_timespec_t} type.
* time tm::                     The @objtype{mmux_libc_tm_t} type.
* time functions::              Handling time.
@end menu

@c page
@node time timeval
@section The @objtype{mmux_libc_timeval_t} type


@MmuxCStructOpaqueTypedef{timeval}
@MmuxSetterGetter{timeval, tv_sec,  mmux_time_t}
@MmuxSetterGetter{timeval, tv_usec, mmux_slong_t}
@MmuxStructDumper{timeval}


@deftypefun void mmux_libc_tv_seconds_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_time_t @var{seconds})
@deftypefunx mmux_time_t mmux_libc_tv_seconds_ref (mmux_libc_timeval_t const * @var{timeval_p})
Aliases for the setter and getter of the field @code{tv_sec}.
@end deftypefun


@deftypefun void mmux_libc_tv_microseconds_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_slong_t @var{microseconds})
@deftypefunx mmux_slong_t mmux_libc_tv_microseconds_ref (mmux_libc_timeval_t const * @var{timeval_p})
Aliases for the setter and getter of the field @code{tv_usec}.
@end deftypefun


@deftypefun void mmux_libc_timeval_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_time_t @var{seconds}, mmux_slong_t @var{microseconds})
Initialise the fields of a @MmuxCStruct{timeval}.
@end deftypefun

@c page
@node time timespec
@section The @objtype{mmux_libc_timespec_t} type


To have more expressive names: in this @api{} we ``rename'' the fields @samp{tv_sec} and
@samp{tv_nsec} of @MmuxCStruct{timespec} to @samp{ts_sec} and @samp{ts_nsec}.


@MmuxCStructOpaqueTypedef{timespec}
@MmuxSetterGetter{timespec, ts_sec,  mmux_time_t}
@MmuxSetterGetter{timespec, ts_nsec, mmux_slong_t}
@MmuxStructDumper{timespec}


@deftypefun void mmux_libc_timespec_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_time_t @var{seconds}, mmux_slong_t @var{nanoseconds})
Initialise the fields of a @MmuxCStruct{timespec}.
@end deftypefun


@deftypefun void mmux_libc_ts_seconds_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_time_t @var{seconds})
@deftypefunx mmux_time_t mmux_libc_ts_seconds_ref (mmux_libc_timeval_t const * @var{timeval_p})
Aliases for the setter and getter of the field @code{ts_sec}.
@end deftypefun


@deftypefun void mmux_libc_ts_nanoseconds_set (mmux_libc_timeval_t * @var{timeval_p}, mmux_slong_t @var{nanoseconds})
@deftypefunx mmux_slong_t mmux_libc_ts_nanoseconds_ref (mmux_libc_timeval_t const * @var{timeval_p})
Aliases for the setter and getter of the field @code{ts_sec}.
@end deftypefun

@c page
@node time tm
@section The @objtype{mmux_libc_tm_t} type


@MmuxCStructOpaqueTypedef{tm}
@MmuxSetterGetter{tm, tm_sec,         mmux_sint_t}
@MmuxSetterGetter{tm, tm_min,         mmux_sint_t}
@MmuxSetterGetter{tm, tm_hour,        mmux_sint_t}
@MmuxSetterGetter{tm, tm_mday,        mmux_sint_t}
@MmuxSetterGetter{tm, tm_mon,         mmux_sint_t}
@MmuxSetterGetter{tm, tm_year,        mmux_sint_t}
@MmuxSetterGetter{tm, tm_wday,        mmux_sint_t}
@MmuxSetterGetter{tm, tm_yday,        mmux_sint_t}
@MmuxSetterGetter{tm, tm_isdst,       mmux_sint_t}
@MmuxSetterGetter{tm, tm_gmtoff,      mmux_slong_t}
@MmuxSetterGetter{tm, tm_zone,        char const *}
@MmuxStructDumper{tm}


@deftypefun void mmux_libc_tm_reset (mmux_libc_tm_t * @var{TM_P})
Reset the fields to:

@example
tm_sec    = 0
tm_min    = 0
tm_hour   = 0
tm_mday   = 1
tm_mon    = 0
tm_year   = 0
tm_wday   = 0
tm_yday   = 0
tm_isdst  = 0
tm_gmtoff = 0
tm_zone   = NULL
@end example
@end deftypefun

@c page
@node time functions
@section Handling time


@deftypefun mmux_time_t mmux_libc_time (void)
@MmuxCInterface{time}.
@end deftypefun


@deftypefun {mmux_libc_tm_t *} mmux_libc_localtime (mmux_time_t @var{T})
@MmuxCInterface{localtime}.

@example
mmux_time_t       T    = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_localtime(T);
@end example
@end deftypefun


@deftypefun {mmux_libc_tm_t *} mmux_libc_gmtime (mmux_time_t @var{T})
@MmuxCInterface{gmtime}.

@example
mmux_time_t       T    = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_gmtime(T);
@end example
@end deftypefun


@deftypefun {char const *} mmux_libc_ctime (mmux_time_t @var{T})
@MmuxCInterface{ctime}.

@example
mmux_time_t  T   = mmux_libc_time();
char const * str = mmux_libc_ctime(T);

mmux_libc_dprintfou("%s\n", str);
@end example
@end deftypefun


@deftypefun mmux_time_t mmux_libc_mktime (mmux_libc_tm_t * @var{tm_p})
@MmuxCInterface{mktime}.

@example
mmux_time_t       T1   = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_localtime(T1);
mmux_time_t       T2   = mmux_libc_mktime(tm_p);
@end example
@end deftypefun


@deftypefun mmux_time_t mmux_libc_timegm (mmux_libc_tm_t * @var{tm_p})
@MmuxCInterface{timegm}.

@example
mmux_time_t       T1   = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_localtime(T1);
mmux_time_t       T2   = mmux_libc_timegm(tm_p);
@end example
@end deftypefun


@deftypefun {char const *} mmux_libc_asctime (mmux_libc_tm_t * @var{tm_p})
@MmuxCInterface{asctime}.

@example
mmux_time_t       T    = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_localtime(T);
char const *      str  = mmux_libc_asctime(tm_p);

mmux_libc_dprintfou("%s\n", str);
@end example
@end deftypefun


@deftypefun bool mmux_libc_strftime (char * @var{bufptr}, mmux_usize_t * @var{buflen_p}, char const * @var{template}, mmux_libc_tm_t * @var{tm_p})
@MmuxCInterface{strftime}.  Format an output string representation of the timestamp referenced by
@var{TM_P} and store it in the buffer referenced by @var{bufptr}.

@itemize
@item
Upon calling this function: @var{buflen_p} must reference a location containing the number of bytes
in the buffer referenced by @var{bufptr}.

@item
Upon successfully returning from a function call: the location referenced by @var{buflen_p} is set
to the number of characters in the output string, including the terminating null byte.
@end itemize

@example
mmux_time_t       T    = mmux_libc_time();
mmux_libc_tm_t *  tm_p = mmux_libc_localtime(T);

#undef  IS_THIS_ENOUGH_QUESTION_MARK
#define IS_THIS_ENOUGH_QUESTION_MARK	4096
mmux_usize_t  buflen = IS_THIS_ENOUGH_QUESTION_MARK;
char          bufstr[buflen];

if (mmux_libc_strftime(bufstr, &buflen, template, tm_p)) @{
  /* error */
@}
mmux_libc_dprintfou("%s\n", bufstr);
@end example
@end deftypefun


@deftypefun bool mmux_libc_strptime (char ** @var{first_unprocessed_after_timestamp_p}, char const * @var{input_string}, char const * @var{template}, mmux_libc_tm_t * @var{tm_p})
@MmuxCInterface{strptime}.

@example
char const *      template     = "%a, %d %b %Y %H:%M:%S %z";
char const *      input_string = "Fri, 15 Nov 2024 23:11:20 +0100";
mmux_libc_tm_t *  tm_p         = calloc(1, sizeof(mmux_libc_tm_t));
char *            first_unprocessed_after_timestamp;

if (mmux_libc_strptime(&first_unprocessed_after_timestamp, input_string, template, tm_p)) @{
  /* error */
@}
mmux_libc_tm_dump(MMUX_LIBC_STDOU, tm_p, NULL);
@end example
@end deftypefun


@deftypefun mmux_uint_t mmux_libc_sleep (mmux_uint_t seconds)
@MmuxCInterface{sleep}.
@end deftypefun


@deftypefun bool mmux_libc_nanosleep (mmux_libc_timespec_t * @var{requested_time}, mmux_libc_timespec_t * @var{remaining_time})
@MmuxCInterface{nanosleep}.

@example
mmux_libc_timespec_t    requested_time;
mmux_libc_timespec_t    remaining_time;

mmux_libc_timespec_set(&requested_time, 12, 34);
if (mmux_libc_nanosleep(&requested_time, &remaining_time)) @{
  /* error or interruption */
@}
@end example
@end deftypefun

@c page
@node system
@chapter System configuration


@menu
* system parameters::           Configuration parameters.
* system limits::               Configuration limits.
@end menu

@c page
@node system parameters
@section Configuration parameters


@cindex @samp{MMUX_LIBC_SC_} constants
@cindex @samp{MMUX_LIBC_CS_} constants
@cindex Constants @samp{MMUX_LIBC_SC_}
@cindex Constants @samp{MMUX_LIBC_CS_}


@deftypefun bool mmux_libc_sysconf (mmux_slong_t * @var{result_p}, mmux_sint_t @var{parameter})
@MmuxCInterface{sysconf}.  @var{parameter} must be one of the @samp{MMUX_LIBC__SC_*} constants.

@example
mmux_slong_t    result;

if (mmux_libc_sysconf(&result, MMUX_LIBC__SC_PAGESIZE)) @{
  /* error */
@}
/* the result is in "result" */
@end example
@end deftypefun


@deftypefun bool mmux_libc_confstr_size (mmux_usize_t * @var{result_required_nbytes_p}, mmux_sint_t @var{parameter})
@deftypefunx bool mmux_libc_confstr (mmux_sint_t @var{parameter}, char * @var{bufptr}, mmux_usize_t @var{buflen})
@MmuxCInterface{pathconf}.  @var{parameter} must be one of the @samp{MMUX_LIBC__CS_*} constants.

@example
mmux_sint_t     parameter = MMUX_LIBC__CS_PATH;
mmux_usize_t    required_nbytes;

if (mmux_libc_confstr_size(&required_nbytes, parameter)) @{ /* error */ @}
@{
  char value[required_nbytes];

  if (mmux_libc_confstr(parameter, value, required_nbytes)) @{ /* error */ @}
  /* the result is in "value" */
@}
@end example
@end deftypefun

@c page
@node system limits
@section Configuration limits


@MmuxCStructOpaqueTypedef{rlimit}
@MmuxSetterGetter{rlimit, rlim_cur, mmux_rlim_t}
@MmuxSetterGetter{rlimit, rlim_max, mmux_rlim_t}
@MmuxStructDumper{rlimit}


@deftypefun bool mmux_libc_getrlimit (mmux_sint_t @var{resource}, mmux_libc_rlimit_t * @var{rlimit_p})
@MmuxCInterface{getrlimit}.
@end deftypefun


@deftypefun bool mmux_libc_setrlimit (mmux_sint_t @var{resource}, mmux_libc_rlimit_t * @var{rlimit_p})
@MmuxCInterface{setrlimit}.
@end deftypefun


@deftypefun bool mmux_libc_prlimit (mmux_pid_t @var{pid}, mmux_sint_t @var{resource}, mmux_libc_rlimit_t * @var{new_rlimit_p}, mmux_libc_rlimit_t * @var{old_rlimit_p})
@MmuxCInterface{prlimit}.
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

