# @configure_input@
#

AC_PREREQ([2.69])
MMUX_PKG_VERSIONS([0],[1],[0],[devel.1])
AC_INIT([MMUX Bash Pointers],[MMUX_PACKAGE_VERSION],
  [mrc.mgg@gmail.com],
  [mmux-bash-pointers],[http://github.com/marcomaggi/mmux-bash-pointers])
MMUX_INIT
MMUX_LIBTOOL_LIBRARY_VERSIONS([mmux_bash_pointers],1,0,0)
AC_REVISION([0.1])
AC_COPYRIGHT([Copyright (c) 2024 Marco Maggi <mrc.mgg@gmail.com>

This program is free software: you  can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free  Software Foundation, either version  3 of the License,  or (at
your option) any later version.

This program  is distributed  in the  hope that it  will be  useful, but
WITHOUT   ANY   WARRANTY;  without   even   the   implied  warranty   of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
])
AC_CONFIG_SRCDIR([src/])
AC_CONFIG_MACRO_DIR([meta/autotools])
AC_CONFIG_AUX_DIR([meta/autotools])
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([1.16 foreign subdir-objects])
AM_MAINTAINER_MODE

AM_PROG_AR
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P

LT_PREREQ([2.4])
LT_INIT


#### basic system inspection

MMUX_CHECK_TARGET_OS
AX_IS_RELEASE([git-directory])

AC_LANG([C])
MMUX_LANG_C11

AM_PROG_AS
AM_PROG_CC_C_O
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([assert.h stdint.h strings.h errno.h stddef.h math.h])

AC_PATH_PROG([M4_PROGRAM],[m4])
AC_PATH_PROG([BASH_PROGRAM],[/bin/bash],[/bin/bash],[:])

AC_ARG_ENABLE([mbfl],
  [AS_HELP_STRING([--enable-mbfl],[enable using MBFL for testing (default: yes)])],
  [AS_VAR_SET([MMUX_ENABLED_MBFL],[$enableval])],
  [AS_VAR_SET([MMUX_ENABLED_MBFL],[yes])])

if test "x$MMUX_ENABLED_MBFL" = 'xyes'
then
  MBFL_SETUP(v3.0.0)
fi
AM_CONDITIONAL([MMUX_TESTING_ENABLED],[test "x$MMUX_ENABLED_MBFL" = 'xyes'])

AC_CACHE_SAVE


#### check for C language types

AC_TYPE_LONG_LONG_INT
AC_TYPE_UNSIGNED_LONG_LONG_INT
AC_TYPE_LONG_DOUBLE

AC_TYPE_INT8_T
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T

AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_INTMAX_T
AC_TYPE_INTPTR_T

# This defines both "uid_t" and "gid_t".
AC_TYPE_UID_T


#### checks for library functions

AC_FUNC_MALLOC
AC_FUNC_MEMCMP

AC_CACHE_SAVE


#### inspecting

AC_DEFUN([MMUX_VALUEOF_TEST],
  [AC_CACHE_CHECK([the value of '$2'],
     [mmux_cv_valueof_$1],
     [AC_COMPUTE_INT([mmux_cv_valueof_$1],
        [$2],
        [#include <errno.h>],
        [AS_VAR_SET([mmux_cv_valueof_$1],[no])])])
    if test "x$mmux_cv_valueof_$1" = "xno"
    then AS_VAR_SET([MMUX_HAVE_$1],[0])
    else AS_VAR_SET([MMUX_HAVE_$1],[1])
    fi
    AC_DEFINE_UNQUOTED([MMUX_HAVE_$1],[$MMUX_HAVE_$1],[The value $1 of errno is defined.])])

AC_DEFUN([MMUX_ERRNO_TEST],[MMUX_VALUEOF_TEST([$1],[$1])])

MMUX_ERRNO_TEST([EPERM])
MMUX_ERRNO_TEST([ENOENT])
MMUX_ERRNO_TEST([ESRCH])
MMUX_ERRNO_TEST([EINTR])
MMUX_ERRNO_TEST([EIO])
MMUX_ERRNO_TEST([ENXIO])
MMUX_ERRNO_TEST([E2BIG])
MMUX_ERRNO_TEST([ENOEXEC])
MMUX_ERRNO_TEST([EBADF])
MMUX_ERRNO_TEST([ECHILD])
MMUX_ERRNO_TEST([EAGAIN])
MMUX_ERRNO_TEST([ENOMEM])
MMUX_ERRNO_TEST([EACCES])
MMUX_ERRNO_TEST([EFAULT])
MMUX_ERRNO_TEST([ENOTBLK])
MMUX_ERRNO_TEST([EBUSY])
MMUX_ERRNO_TEST([EEXIST])
MMUX_ERRNO_TEST([EXDEV])
MMUX_ERRNO_TEST([ENODEV])
MMUX_ERRNO_TEST([ENOTDIR])
MMUX_ERRNO_TEST([EISDIR])
MMUX_ERRNO_TEST([EINVAL])
MMUX_ERRNO_TEST([ENFILE])
MMUX_ERRNO_TEST([EMFILE])
MMUX_ERRNO_TEST([ENOTTY])
MMUX_ERRNO_TEST([ETXTBSY])
MMUX_ERRNO_TEST([EFBIG])
MMUX_ERRNO_TEST([ENOSPC])
MMUX_ERRNO_TEST([ESPIPE])
MMUX_ERRNO_TEST([EROFS])
MMUX_ERRNO_TEST([EMLINK])
MMUX_ERRNO_TEST([EPIPE])
MMUX_ERRNO_TEST([EDOM])
MMUX_ERRNO_TEST([ERANGE])
MMUX_ERRNO_TEST([EDEADLK])
MMUX_ERRNO_TEST([ENAMETOOLONG])
MMUX_ERRNO_TEST([ENOLCK])
MMUX_ERRNO_TEST([ENOSYS])
MMUX_ERRNO_TEST([ENOTEMPTY])
MMUX_ERRNO_TEST([ELOOP])
MMUX_ERRNO_TEST([EWOULDBLOCK])
MMUX_ERRNO_TEST([ENOMSG])
MMUX_ERRNO_TEST([EIDRM])
MMUX_ERRNO_TEST([ECHRNG])
MMUX_ERRNO_TEST([EL2NSYNC])
MMUX_ERRNO_TEST([EL3HLT])
MMUX_ERRNO_TEST([EL3RST])
MMUX_ERRNO_TEST([ELNRNG])
MMUX_ERRNO_TEST([EUNATCH])
MMUX_ERRNO_TEST([ENOCSI])
MMUX_ERRNO_TEST([EL2HLT])
MMUX_ERRNO_TEST([EBADE])
MMUX_ERRNO_TEST([EBADR])
MMUX_ERRNO_TEST([EXFULL])
MMUX_ERRNO_TEST([ENOANO])
MMUX_ERRNO_TEST([EBADRQC])
MMUX_ERRNO_TEST([EBADSLT])
MMUX_ERRNO_TEST([EDEADLOCK])
MMUX_ERRNO_TEST([EBFONT])
MMUX_ERRNO_TEST([ENOSTR])
MMUX_ERRNO_TEST([ENODATA])
MMUX_ERRNO_TEST([ETIME])
MMUX_ERRNO_TEST([ENOSR])
MMUX_ERRNO_TEST([ENONET])
MMUX_ERRNO_TEST([ENOPKG])
MMUX_ERRNO_TEST([EREMOTE])
MMUX_ERRNO_TEST([ENOLINK])
MMUX_ERRNO_TEST([EADV])
MMUX_ERRNO_TEST([ESRMNT])
MMUX_ERRNO_TEST([ECOMM])
MMUX_ERRNO_TEST([EPROTO])
MMUX_ERRNO_TEST([EMULTIHOP])
MMUX_ERRNO_TEST([EDOTDOT])
MMUX_ERRNO_TEST([EBADMSG])
MMUX_ERRNO_TEST([EOVERFLOW])
MMUX_ERRNO_TEST([ENOTUNIQ])
MMUX_ERRNO_TEST([EBADFD])
MMUX_ERRNO_TEST([EREMCHG])
MMUX_ERRNO_TEST([ELIBACC])
MMUX_ERRNO_TEST([ELIBBAD])
MMUX_ERRNO_TEST([ELIBSCN])
MMUX_ERRNO_TEST([ELIBMAX])
MMUX_ERRNO_TEST([ELIBEXEC])
MMUX_ERRNO_TEST([EILSEQ])
MMUX_ERRNO_TEST([ERESTART])
MMUX_ERRNO_TEST([ESTRPIPE])
MMUX_ERRNO_TEST([EUSERS])
MMUX_ERRNO_TEST([ENOTSOCK])
MMUX_ERRNO_TEST([EDESTADDRREQ])
MMUX_ERRNO_TEST([EMSGSIZE])
MMUX_ERRNO_TEST([EPROTOTYPE])
MMUX_ERRNO_TEST([ENOPROTOOPT])
MMUX_ERRNO_TEST([EPROTONOSUPPORT])
MMUX_ERRNO_TEST([ESOCKTNOSUPPORT])
MMUX_ERRNO_TEST([EOPNOTSUPP])
MMUX_ERRNO_TEST([EPFNOSUPPORT])
MMUX_ERRNO_TEST([EAFNOSUPPORT])
MMUX_ERRNO_TEST([EADDRINUSE])
MMUX_ERRNO_TEST([EADDRNOTAVAIL])
MMUX_ERRNO_TEST([ENETDOWN])
MMUX_ERRNO_TEST([ENETUNREACH])
MMUX_ERRNO_TEST([ENETRESET])
MMUX_ERRNO_TEST([ECONNABORTED])
MMUX_ERRNO_TEST([ECONNRESET])
MMUX_ERRNO_TEST([ENOBUFS])
MMUX_ERRNO_TEST([EISCONN])
MMUX_ERRNO_TEST([ENOTCONN])
MMUX_ERRNO_TEST([ESHUTDOWN])
MMUX_ERRNO_TEST([ETOOMANYREFS])
MMUX_ERRNO_TEST([ETIMEDOUT])
MMUX_ERRNO_TEST([ECONNREFUSED])
MMUX_ERRNO_TEST([EHOSTDOWN])
MMUX_ERRNO_TEST([EHOSTUNREACH])
MMUX_ERRNO_TEST([EALREADY])
MMUX_ERRNO_TEST([EINPROGRESS])
MMUX_ERRNO_TEST([ESTALE])
MMUX_ERRNO_TEST([EUCLEAN])
MMUX_ERRNO_TEST([ENOTNAM])
MMUX_ERRNO_TEST([ENAVAIL])
MMUX_ERRNO_TEST([EISNAM])
MMUX_ERRNO_TEST([EREMOTEIO])
MMUX_ERRNO_TEST([EDQUOT])
MMUX_ERRNO_TEST([ENOMEDIUM])
MMUX_ERRNO_TEST([EMEDIUMTYPE])
MMUX_ERRNO_TEST([ECANCELED])
MMUX_ERRNO_TEST([ENOKEY])
MMUX_ERRNO_TEST([EKEYEXPIRED])
MMUX_ERRNO_TEST([EKEYREVOKED])
MMUX_ERRNO_TEST([EKEYREJECTED])
MMUX_ERRNO_TEST([EOWNERDEAD])
MMUX_ERRNO_TEST([ENOTRECOVERABLE])

AC_CACHE_SAVE


#### external libraries

PKG_PREREQ([0.29])
PKG_INSTALLDIR
MMUX_CHECK_PKG_CONFIG_MACROS
PKG_CHECK_MODULES([BASH],[bash],,[AC_MSG_WARN([package GNU Bash not found])])

#AC_SEARCH_LIBS(cos, m,, [AC_MSG_ERROR([Cannot find libm])])

AC_CACHE_SAVE


#### finish

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile]
  [src/libmmux-bash-pointers.bash]
  [meta/scripts/mmux-bash-pointers.pc]
  [meta/slackware/slack-desc])
MMUX_OUTPUT
AC_OUTPUT

### end of file
