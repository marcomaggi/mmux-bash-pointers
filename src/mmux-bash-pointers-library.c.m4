/*
  Part of: MMUX Bash Pointers
  Contents: library functions
  Date: Sep  9, 2024

  Abstract

	This module implements library initialisation and version numbers inspection.

  Copyright (C) 2024 Marco Maggi <mrc.mgg@gmail.com>

  This program is free  software: you can redistribute it and/or  modify it under the
  terms  of  the  GNU General  Public  License  as  published  by the  Free  Software
  Foundation, either version 3 of the License, or (at your option) any later version.

  This program  is distributed in the  hope that it  will be useful, but  WITHOUT ANY
  WARRANTY; without  even the implied  warranty of  MERCHANTABILITY or FITNESS  FOR A
  PARTICULAR PURPOSE.  See the GNU General Public License for more details.

  You should have received  a copy of the GNU General Public  License along with this
  program.  If not, see <http://www.gnu.org/licenses/>.
*/


/** --------------------------------------------------------------------
 ** Headers.
 ** ----------------------------------------------------------------- */

#include "mmux-bash-pointers-internals.h"


/** --------------------------------------------------------------------
 ** Version functions.
 ** ----------------------------------------------------------------- */

char const *
mmux_bash_pointers_version_string (void)
{
  return mmux_bash_pointers_VERSION_INTERFACE_STRING;
}
int
mmux_bash_pointers_version_interface_current (void)
{
  return mmux_bash_pointers_VERSION_INTERFACE_CURRENT;
}
int
mmux_bash_pointers_version_interface_revision (void)
{
  return mmux_bash_pointers_VERSION_INTERFACE_REVISION;
}
int
mmux_bash_pointers_version_interface_age (void)
{
  return mmux_bash_pointers_VERSION_INTERFACE_AGE;
}


/** --------------------------------------------------------------------
 ** Error handling.
 ** ----------------------------------------------------------------- */

mmux_bash_rv_t
mmux_bash_pointers_set_ERRNO (int errnum, char const * const who)
{
  return mmux_sint_bind_to_variable("ERRNO", errnum, who);
}
mmux_bash_rv_t
mmux_bash_pointers_consume_errno (char const * const who)
{
  mmux_bash_pointers_set_ERRNO(errno, who);
  errno = 0;
  return MMUX_FAILURE;
}


m4_divert(-1)m4_dnl
m4_dnl --------------------------------------------------------------------
m4_dnl Helper macros for library initialisation.
m4_dnl --------------------------------------------------------------------

m4_define([[[MMUX_DEFINE_SIZEOF_VARIABLE]]],[[[MMUX_BASH_CONDITIONAL_CODE([[[$2]]],[[[
  if (0) { fprintf(stderr, "%s: sizeof %s\n", __func__, "$1"); }
  mmux_bash_create_global_sint_variable("mmux_[[[]]]MMUX_M4_TOLOWER([[[$1]]])[[[]]]_SIZEOF", mmux_$1_sizeof(),
                                        MMUX_BUILTIN_NAME_STR);
]]])]]])

/* ------------------------------------------------------------------ */

m4_define([[[MMUX_DEFINE_MAXIMUM_VARIABLE]]],[[[MMUX_BASH_CONDITIONAL_CODE([[[$2]]],[[[{
  mmux_$1_t value = mmux_$1_maximum();
  int requested_nbytes = mmux_$1_sprint_size(value);

  if (0 > requested_nbytes) {
    return MMUX_FAILURE;
  } else {
    char	str[requested_nbytes];

    mmux_$1_sprint(str, requested_nbytes, value);
    mmux_bash_create_global_string_variable("mmux_[[[]]]MMUX_M4_TOLOWER([[[$1]]])[[[]]]_MAX", str, MMUX_BUILTIN_NAME_STR);
  }
}]]])]]])

/* ------------------------------------------------------------------ */

m4_define([[[MMUX_DEFINE_MINIMUM_VARIABLE]]],[[[MMUX_BASH_CONDITIONAL_CODE([[[$2]]],[[[{
  mmux_$1_t value = mmux_$1_minimum();
  int requested_nbytes = mmux_$1_sprint_size(value);

  if (0 > requested_nbytes) {
    return MMUX_FAILURE;
  } else {
    char	str[requested_nbytes];

    mmux_$1_sprint(str, requested_nbytes, value);
    mmux_bash_create_global_string_variable("mmux_[[[]]]MMUX_M4_TOLOWER([[[$1]]])[[[]]]_MIN", str, MMUX_BUILTIN_NAME_STR);
  }
}]]])]]])

/* ------------------------------------------------------------------ */

m4_define([[[MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE]]],[[[#if ((defined MMUX_HAVE_$1) && (1 == MMUX_HAVE_$1))
  mmux_bash_create_global_sint_variable("mmux_libc_$1",	$1, MMUX_BUILTIN_NAME_STR);
#endif
]]])

m4_define([[[MMUX_DEFINE_INT_CONSTANT_VARIABLE]]],[[[#if ((defined MMUX_HAVE_$1) && (1 == MMUX_HAVE_$1))
  mmux_bash_create_global_sint_variable("mmux_libc_$1",	$1, MMUX_BUILTIN_NAME_STR);
#endif
]]])

m4_divert(0)m4_dnl


/** --------------------------------------------------------------------
 ** Library initialisation.
 ** ----------------------------------------------------------------- */

MMUX_BASH_BUILTIN_MAIN([[[mmux_bash_pointers_library_init]]])
{
  /* Initialise the parsers module. */
  if (mmux_cc_types_init_parsers_module()) {
    fprintf(stderr, "MMUX Bash Pointers: internal error: initialising parsers module\n");
    return MMUX_FAILURE;
  }

  /* Initialise the sprinters module. */
  if (mmux_cc_types_init_sprint_module ()) {
    fprintf(stderr, "MMUX Bash Pointers: internal error: initialising sprinters module\n");
    return MMUX_FAILURE;
  }

  /* These constants are defined by the Standard C Library; we make them available as
     global shell variables. */
  {
    MMUX_DEFINE_SIZEOF_VARIABLE([[[pointer]]]);

    MMUX_DEFINE_SIZEOF_VARIABLE([[[schar]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uchar]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sshort]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[ushort]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sint]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uint]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[slong]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[ulong]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sllong]]],[[[MMUX_HAVE_CC_TYPE_SLLONG]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[ullong]]],[[[MMUX_HAVE_CC_TYPE_ULLONG]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[float]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[double]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[ldouble]]],[[[MMUX_HAVE_CC_TYPE_LDOUBLE]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[float32]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[float64]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[float128]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[float32x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32X]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[float64x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64X]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[float128x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128X]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[decimal32]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL32]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[decimal64]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL64]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[decimal128]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL128]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexd]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexld]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXLD]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf32]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF32]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf64]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF64]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf128]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF128]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf32x]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF32X]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf64x]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF64X]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexf128x]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXF128X]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexd32]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXD32]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexd64]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXD64]]])
    MMUX_DEFINE_SIZEOF_VARIABLE([[[complexd128]]],[[[MMUX_HAVE_CC_TYPE_COMPLEXD128]]])

    MMUX_DEFINE_SIZEOF_VARIABLE([[[sint8]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uint8]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sint16]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uint16]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sint32]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uint32]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sint64]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uint64]]]);

    MMUX_DEFINE_SIZEOF_VARIABLE([[[ssize]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[usize]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sintmax]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uintmax]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[sintptr]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uintptr]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[ptrdiff]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[mode]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[off]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[pid]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[uid]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[gid]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[wchar]]]);
    MMUX_DEFINE_SIZEOF_VARIABLE([[[wint]]]);
  }
  {
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[pointer]]]);

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[schar]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uchar]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sshort]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ushort]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sint]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uint]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[slong]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ulong]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sllong]]],[[[MMUX_HAVE_CC_TYPE_SLLONG]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ullong]]],[[[MMUX_HAVE_CC_TYPE_ULLONG]]])

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[double]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ldouble]]],[[[MMUX_HAVE_CC_TYPE_LDOUBLE]]])

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float32]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float64]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float128]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128]]])

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float32x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32X]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float64x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64X]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[float128x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128X]]])

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[decimal32]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL32]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[decimal64]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL64]]])
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[decimal128]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL128]]])


    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sint8]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uint8]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sint16]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uint16]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sint32]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uint32]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sint64]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uint64]]]);

    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ssize]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[usize]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sintmax]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uintmax]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[sintptr]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uintptr]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[ptrdiff]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[mode]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[off]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[pid]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[uid]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[gid]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[wchar]]]);
    MMUX_DEFINE_MAXIMUM_VARIABLE([[[wint]]]);
  }
  {
    MMUX_DEFINE_MINIMUM_VARIABLE([[[pointer]]]);

    MMUX_DEFINE_MINIMUM_VARIABLE([[[schar]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uchar]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sshort]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[ushort]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sint]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uint]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[slong]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[ulong]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sllong]]],[[[MMUX_HAVE_CC_TYPE_SLLONG]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[ullong]]],[[[MMUX_HAVE_CC_TYPE_ULLONG]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[float]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[double]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[ldouble]]],[[[MMUX_HAVE_CC_TYPE_LDOUBLE]]])

    MMUX_DEFINE_MINIMUM_VARIABLE([[[float32]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[float64]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[float128]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128]]])

    MMUX_DEFINE_MINIMUM_VARIABLE([[[float32x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT32X]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[float64x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT64X]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[float128x]]],[[[MMUX_HAVE_CC_TYPE_FLOAT128X]]])

    MMUX_DEFINE_MINIMUM_VARIABLE([[[decimal32]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL32]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[decimal64]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL64]]])
    MMUX_DEFINE_MINIMUM_VARIABLE([[[decimal128]]],[[[MMUX_HAVE_CC_TYPE_DECIMAL128]]])

    MMUX_DEFINE_MINIMUM_VARIABLE([[[sint8]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uint8]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sint16]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uint16]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sint32]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uint32]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sint64]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uint64]]]);

    MMUX_DEFINE_MINIMUM_VARIABLE([[[ssize]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[usize]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sintmax]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uintmax]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[sintptr]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uintptr]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[ptrdiff]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[mode]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[off]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[pid]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[uid]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[gid]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[wchar]]]);
    MMUX_DEFINE_MINIMUM_VARIABLE([[[wint]]]);
  }
  {
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPERM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOENT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESRCH]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EINTR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EIO]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENXIO]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[E2BIG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOEXEC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADF]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECHILD]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EAGAIN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOMEM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EACCES]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EFAULT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTBLK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBUSY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EEXIST]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EXDEV]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENODEV]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTDIR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EISDIR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EINVAL]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENFILE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EMFILE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTTY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ETXTBSY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EFBIG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOSPC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESPIPE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EROFS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EMLINK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPIPE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDOM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ERANGE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDEADLK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENAMETOOLONG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOLCK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOSYS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTEMPTY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELOOP]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EWOULDBLOCK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOMSG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EIDRM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECHRNG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EL2NSYNC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EL3HLT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EL3RST]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELNRNG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EUNATCH]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOCSI]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EL2HLT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EXFULL]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOANO]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADRQC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADSLT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDEADLOCK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBFONT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOSTR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENODATA]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ETIME]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOSR]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENONET]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOPKG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EREMOTE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOLINK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EADV]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESRMNT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECOMM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPROTO]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EMULTIHOP]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDOTDOT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADMSG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EOVERFLOW]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTUNIQ]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EBADFD]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EREMCHG]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELIBACC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELIBBAD]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELIBSCN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELIBMAX]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ELIBEXEC]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EILSEQ]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ERESTART]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESTRPIPE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EUSERS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTSOCK]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDESTADDRREQ]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EMSGSIZE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPROTOTYPE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOPROTOOPT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPROTONOSUPPORT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESOCKTNOSUPPORT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EOPNOTSUPP]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EPFNOSUPPORT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EAFNOSUPPORT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EADDRINUSE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EADDRNOTAVAIL]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENETDOWN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENETUNREACH]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENETRESET]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECONNABORTED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECONNRESET]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOBUFS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EISCONN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTCONN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESHUTDOWN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ETOOMANYREFS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ETIMEDOUT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECONNREFUSED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EHOSTDOWN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EHOSTUNREACH]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EALREADY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EINPROGRESS]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ESTALE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EUCLEAN]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTNAM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENAVAIL]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EISNAM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EREMOTEIO]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EDQUOT]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOMEDIUM]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EMEDIUMTYPE]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ECANCELED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOKEY]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EKEYEXPIRED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EKEYREVOKED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EKEYREJECTED]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[EOWNERDEAD]]]);
    MMUX_DEFINE_ERRNO_CONSTANT_VARIABLE([[[ENOTRECOVERABLE]]]);
  }

  {
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[EOF]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[FD_CLOEXEC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_DUPFD]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_GETFD]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_GETFL]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_GETLK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_GETOWN]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_OK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_RDLCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_SETFD]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_SETFL]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_SETLK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_SETLKW]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_SETOWN]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_UNLCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[F_WRLCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_ACCMODE]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_APPEND]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_ASYNC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_CLOEXEC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_CREAT]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_DIRECT]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_DIRECTORY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_EXCL]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_EXEC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_EXLOCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_FSYNC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_IGNORE_CTTY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_LARGEFILE]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NDELAY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NOATIME]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NOCTTY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NOFOLLOW]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NOLINK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NONBLOCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_NOTRANS]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_RDONLY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_RDWR]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_READ]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_SHLOCK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_SYNC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_TRUNC]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_WRITE]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[O_WRONLY]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[R_OK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[SEEK_CUR]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[SEEK_DATA]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[SEEK_END]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[SEEK_HOLE]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[SEEK_SET]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IRGRP]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IROTH]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IRUSR]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IRWXG]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IRWXO]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IRWXU]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_ISGID]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_ISUID]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_ISVTX]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IWGRP]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IWOTH]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IWUSR]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IXGRP]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IXOTH]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[S_IXUSR]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[W_OK]]]);
    MMUX_DEFINE_INT_CONSTANT_VARIABLE([[[X_OK]]]);
  }
  return MMUX_SUCCESS;
}
MMUX_BASH_DEFINE_TYPICAL_BUILTIN_FUNCTION([[[mmux_bash_pointers_library_init]]],
    [[[(1 == argc)]]],
    [[["mmux_bash_pointers_library_init"]]],
    [[["Initialise the library MMUX Bash Pointers."]]])


/** --------------------------------------------------------------------
 ** Store result value in result variable.
 ** ----------------------------------------------------------------- */

m4_define([[[MMUX_BASH_DEFINE_VALUE_STORER]]],[[[MMUX_BASH_CONDITIONAL_CODE([[[$2]]],[[[
mmux_bash_rv_t
mmux_$1_bind_to_variable (char const * variable_name, mmux_$1_t value, char const * caller_name)
{
  int		rv, required_nbytes;

  required_nbytes = mmux_$1_sprint_size(value);
  if (0 > required_nbytes) {
    return MMUX_FAILURE;
  } else {
    char	s_value[required_nbytes];

    rv = mmux_$1_sprint(s_value, required_nbytes, value);
    if (false == rv) {
      return mmux_string_bind_to_bash_variable(variable_name, s_value, caller_name);
    } else {
      return MMUX_FAILURE;
    }
  }
}
]]])]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[pointer]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[schar]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uchar]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sshort]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ushort]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sint]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uint]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[slong]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ulong]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sllong]]],		[[[MMUX_HAVE_CC_TYPE_SLLONG]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ullong]]],		[[[MMUX_HAVE_CC_TYPE_SLLONG]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[sint8]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uint8]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sint16]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uint16]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sint32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uint32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sint64]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uint64]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[float]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[double]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ldouble]]],		[[[MMUX_HAVE_CC_TYPE_LDOUBLE]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[float32]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[float64]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT64]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[float128]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT128]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[float32x]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT32X]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[float64x]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT64X]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[float128x]]],		[[[MMUX_HAVE_CC_TYPE_FLOAT128X]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[decimal32]]],		[[[MMUX_HAVE_CC_TYPE_DECIMAL32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[decimal64]]],		[[[MMUX_HAVE_CC_TYPE_DECIMAL64]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[decimal128]]],		[[[MMUX_HAVE_CC_TYPE_DECIMAL128]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[complexf]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexd]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexld]]],		[[[MMUX_HAVE_CC_TYPE_COMPLEXLD]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[complexf32]]],		[[[MMUX_HAVE_CC_TYPE_COMPLEXF32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexf64]]],		[[[MMUX_HAVE_CC_TYPE_COMPLEXF64]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexf128]]],	[[[MMUX_HAVE_CC_TYPE_COMPLEXF128]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[complexf32x]]],	[[[MMUX_HAVE_CC_TYPE_COMPLEXF32X]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexf64x]]],	[[[MMUX_HAVE_CC_TYPE_COMPLEXF64X]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexf128x]]],	[[[MMUX_HAVE_CC_TYPE_COMPLEXF128X]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[complexd32]]],		[[[MMUX_HAVE_CC_TYPE_COMPLEXD32]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexd64]]],		[[[MMUX_HAVE_CC_TYPE_COMPLEXD64]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[complexd128]]],	[[[MMUX_HAVE_CC_TYPE_COMPLEXD128]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[usize]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ssize]]])

MMUX_BASH_DEFINE_VALUE_STORER([[[sintmax]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uintmax]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[sintptr]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uintptr]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[ptrdiff]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[mode]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[off]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[pid]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[uid]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[gid]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[wchar]]])
MMUX_BASH_DEFINE_VALUE_STORER([[[wint]]])

/* end of file */
