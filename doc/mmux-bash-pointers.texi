\input texinfo.tex
@c %**start of header
@setfilename mmux-bash-pointers.info
@settitle MMUX Bash Pointers
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX Bash Pointers

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX Bash Pointers

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-bash-pointers

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_BASH_POINTERS
@set PackagePkgconfigModule             mmux-bash-pointers
@set PackageLibsVar                     @env{MMUX_BASH_POINTERS_LIBS}
@set PackageCflagsVar                   @env{MMUX_BASH_POINTERS_CFLAGS}
@c This is the stem of the library in "libmmux-bash-pointers.so".
@set PackageLibstem                     mmux-bash-pointers
@set PackageApiPrefixLower              mmux_bash_pointers_
@set PackageApiPrefixUpper              MMUX_BASH_POINTERS_

@set PackageHeader                      mmux-bash-pointers.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@ifinfo
@macro mbfl{}
@acronym{MBFL}
@end macro
@end ifinfo
@ifnotinfo
@macro mbfl{}
@acronym{mbfl}
@end macro
@end ifnotinfo

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying

This  document  describes  version  @value{VERSION}   of  @value{PACKAGE},  a  package  implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script  which is meant to  be sourced in a Bash  session or script.

This package makes raw memory pointers available in shell scripts:

@example
declare PTR VALUE

libc_malloc PTR 1024
@{
  pointer-set-sint $PTR 0 123
  pointer-ref-sint VALUE $PTR 0
@}
libc_free $PTR
$VALUE  @result{} 123
@end example

The package targets @posix{} platforms.  Only for testing: this package depends on the external
package @acronym{MBFL} (at least version @samp{v3.0.0-devel.8}).

This package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

Development of this package takes place at:

@center @value{GithubUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-bash-pointers: (mmux-bash-pointers).  Additional GNU Bash builtins.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* variables::                   Global variables.
* memory::                      Standard memory allocation.
* operations::                  Standard memory operations.
* pointers::                    Memory block accessors and mutators.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.

This package makes raw memory pointers available in shell scripts:

@example
declare PTR VALUE

libc_malloc PTR 1024
@{
  pointer-set-sint $PTR 0 123
  pointer-ref-sint VALUE $PTR 0
@}
libc_free $PTR
$VALUE  @result{} 123
@end example

@value{PACKAGE} installs a shared library under @code{$libdir}; for example:

@center @file{/usr/local/lib64/libmmux-bash-pointers.so}

@noindent
it also installs a shell script, a ``shell library'', under @code{$datavar/bash}; for example:

@center @file{/usr/local/share/bash/libmmux-bash-pointers.bash}

@noindent
to use the builtins, we have to load the shell library using the builtin @code{source}.

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_bash_pointers_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_bash_pointers_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_bash_pointers_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_bash_pointers_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node variables
@chapter Global variables


The shell library installed by @value{PACKAGE} defines global variables to allow inspection of the
underlying C language platform.

@menu
* variables sizeof::            C language type sizes.
@end menu

@c page
@node variables sizeof
@section C language type sizes


If a C language type referenced by one of the following variables is undefined: the corresponding
Bash variable is undefined; we can test this condition with @code{test -v}; to test if the
underlying platform implements the type @code{long long}, we can do:

@example
if test -v libc_SIZEOF_SLLONG
then # implemented
else # not implemented
fi
@end example

@macro MmuxDefineGlobalVar{NAME,TYPE}
@defvar libc_SIZEOF_\NAME\
Global variable holding the size, measured in bytes, of the C language type @code{\TYPE\}.
@end defvar

@end macro

@MmuxDefineGlobalVar{POINTER,void *}

@MmuxDefineGlobalVar{SCHAR, signed char}
@MmuxDefineGlobalVar{UCHAR, unsigned char}
@MmuxDefineGlobalVar{SINT, signed int}
@MmuxDefineGlobalVar{UINT, unsigned int}
@MmuxDefineGlobalVar{SLONG, signed long int}
@MmuxDefineGlobalVar{ULONG, unsigned long int}
@MmuxDefineGlobalVar{SLLONG, signed long long int}
@MmuxDefineGlobalVar{ULLONG, unsigned long long int}
@MmuxDefineGlobalVar{FLOAT, float}
@MmuxDefineGlobalVar{DOUBLE, double}
@MmuxDefineGlobalVar{LDOUBLE, long double}
@MmuxDefineGlobalVar{COMPLEX, double complex}

@MmuxDefineGlobalVar{SINT8, int8_t}
@MmuxDefineGlobalVar{UINT8, uint8_t}
@MmuxDefineGlobalVar{SINT16, int16_t}
@MmuxDefineGlobalVar{UINT16, uint16_t}
@MmuxDefineGlobalVar{SINT32, int32_t}
@MmuxDefineGlobalVar{UINT32, uint32_t}
@MmuxDefineGlobalVar{SINT64, int64_t}
@MmuxDefineGlobalVar{UINT64, uint64_t}

@MmuxDefineGlobalVar{SSIZE, ssize_t}
@MmuxDefineGlobalVar{USIZE, size_t}
@MmuxDefineGlobalVar{INTMAX, intmax_t}
@MmuxDefineGlobalVar{INTPTR, intptr_t}
@MmuxDefineGlobalVar{MODE, mode_t}
@MmuxDefineGlobalVar{OFF, off_t}
@MmuxDefineGlobalVar{PID, pid_t}
@MmuxDefineGlobalVar{UID, uid_t}
@MmuxDefineGlobalVar{GID, gid_t}

@c page
@node memory
@chapter Standard memory allocation


Basically, to allocate new memory we should do:

@example
declare PTR

if libc_malloc PTR 123
then exit 1
fi
@{
  # do something
@}
libc_free $PTR
@end example

@noindent
we must remember that if we execute code in a subshell: the pointers will not be valid across
shells; so the following will not work:

@example
declare PTR

$(libc_malloc PTR 123)
libc_free $PTR
@end example

@noindent
because @func{libc_malloc} allocates memory in a subshell.


@deffn Builtin libc_malloc @var{PTRVAR} @var{SIZE}
Allocate a memory block using the standard @cfunc{malloc} function; if successful return true,
otherwise return false.

The argument @var{PTRVAR} must be the name of a variable in which this builtin will store a string
representation of the pointer to the newly allocated block.

The argument @var{SIZE} must be the string representation of an exact, positive integer representing
the requested number of bytes in the newly allocated block; it must fit the C language type
@objtype{size_t}.
@end deffn


@deffn Builtin libc_calloc @var{PTRVAR} @var{ITEM_COUNT} @var{ITEM_SIZE}
Allocate a memory block using the standard @cfunc{calloc} function; if successful return true,
otherwise return false.

The argument @var{PTRVAR} must be the name of a variable in which this builtin will store a string
representation of the pointer to the newly allocated block.

The argument @var{ITEM_COUNT} must be the string representation of an exact, positive integer
representing the number of items the memory block has to contain; it must fit the C language type
@objtype{size_t}.

The argument @var{ITEM_SIZE} must be the string representation of an exact, positive integer
representing the size of each item the memory block has to contain; it must fit the C language type
@objtype{size_t}.
@end deffn


@deffn Builtin libc_realloc @var{PTRVAR} @var{OLDPTR} @var{NEWSIZE}
Reallocate a memory block using the standard @cfunc{realloc} function; if successful return true,
otherwise return false.

The argument @var{PTRVAR} must be the name of a variable in which this builtin will store a string
representation of the pointer to the newly allocated block.

The argument @var{OLDPTR} must be the string representation of the old memory pointer.

The argument @var{SIZE} must be the string representation of an exact, positive integer representing
the newly requested number of bytes in the newly allocated block; it must fit the C language type
@objtype{size_t}.
@end deffn


@deffn Builtin libc_free @var{PTR}
Release a previously allocated memory block using the standard @cfunc{free} function.

The argument @var{PTR} must be the string representation of a memory pointer referencing a
previously allocated block.
@end deffn

@c page
@node operations
@chapter Standard memory operations


@deffn Builtin libc_memset @var{PTR} @var{BYTE} @var{SIZE}
Interface to the standard C language function @cfunc{memset}.

The argument @var{PTR} must be the string representation of a pointer referencing a previously
allocated memory block.

The argument @var{BYTE} must be the string representation of an exact, positive integer representing
the value to which memory bytes must be set; it must fit an unsigned 8-bit integer.

The argument @var{SIZE} must be the string representation of an exact, positive integer representing
the number of bytes to set to @var{BYTE}; it must fit the C language type @objtype{size_t}.

@example
declare PTR SIZE=123

libc_malloc PTR $SIZE
libc_memset $PTR 1 $SIZE
@end example
@end deffn


@deffn Builtin libc_memcpy @var{PTR_TO} @var{PTR_FROM} @var{SIZE}
Interface to the standard C language function @cfunc{memcpy}.

The argument @var{PTR_TO} must be the string representation of a pointer referencing a previously
allocated memory block; the referenced memory is the destination of the copy operation.

The argument @var{PTR_FROM} must be the string representation of a pointer referencing a previously
allocated memory block; the referenced memory is the source of the copy operation.

The argument @var{SIZE} must be the string representation of an exact, positive integer representing
the number of bytes to copy; it must fit the C language type @objtype{size_t}.

@example
declare PTR_FROM PTR_TO SIZE=123

libc_malloc PTR_FROM $SIZE
libc_malloc PTR_TO   $SIZE

libc_memcpy $PTR_TO $PTR_FROM $SIZE
@end example
@end deffn


@deffn Builtin libc_memmove @var{PTR_TO} @var{PTR_FROM} @var{SIZE}
Interface to the standard C language function @cfunc{memmove}.

The argument @var{PTR_TO} must be the string representation of a pointer referencing a previously
allocated memory block; the referenced memory is the destination of the copy operation.

The argument @var{PTR_FROM} must be the string representation of a pointer referencing a previously
allocated memory block; the referenced memory is the source of the copy operation.

The argument @var{SIZE} must be the string representation of an exact, positive integer representing
the number of bytes to copy.

@example
declare PTR_FROM PTR_TO SIZE=123

libc_malloc PTR_FROM $SIZE
libc_malloc PTR_TO   $SIZE

libc_memmove $PTR_TO $PTR_FROM $SIZE
@end example
@end deffn

@c page
@node pointers
@chapter Memory block accessors and mutators


If we allocate memory using the standard C library functions, we can poke and peek values in the
memory blocks:

@example
declare PTR VALUE

libc_malloc PTR 1024
@{
  pointer-set-double $PTR 0 1.23
  pointer-ref-double VALUE $PTR 0
@}
libc_free $PTR
@end example

For all the following builtins, the argument:

@table @var
@item POINTER
must be the string representation of a memory pointer referencing a previously allocated block;

@item OFFSET
must be the string representation of an exact, positive integer, compatible with the C language type
@code{size_t}, representing an offset from @var{POINTER} @strong{measured in bytes};

@item VALUE
must be the string representation of a number, compatible with a C language type of the specific
mutator: it is stored by the mutators at @var{OFFSET} from @var{POINTER};

@item VALUEVAR
must be a string representing the name of a shell variable: it is used by the accessors to store the
value extracted at @var{OFFSET} from @var{POINTER}.
@end table


@macro MmuxDefineAccessorMutator{STEM,TYPE}
@deffn {Builtin Mutator} pointer-set-\STEM\ @var{POINTER} @var{OFFSET} @var{VALUE}
@deffnx {Builtin Accessor} pointer-ref-\STEM\ @var{VALUEVAR} @var{POINTER} @var{OFFSET}
Accessor and mutator for memory blocks operating on the C language type @code{\TYPE\}.
@end deffn

@end macro

@MmuxDefineAccessorMutator{pointer,void *}

@MmuxDefineAccessorMutator{schar,signed char}
@MmuxDefineAccessorMutator{uchar,unsigned char}
@MmuxDefineAccessorMutator{sint,signed int}
@MmuxDefineAccessorMutator{uint,unsigned int}
@MmuxDefineAccessorMutator{slong,signed long}
@MmuxDefineAccessorMutator{ulong,unsigned long}
@MmuxDefineAccessorMutator{sllong,signed long long}
@MmuxDefineAccessorMutator{ullong,unsigned long long}
@MmuxDefineAccessorMutator{float,float}
@MmuxDefineAccessorMutator{double,double}
@MmuxDefineAccessorMutator{ldouble,long double}
@MmuxDefineAccessorMutator{complex,double complex}

@MmuxDefineAccessorMutator{sint8,int8_t}
@MmuxDefineAccessorMutator{uint8,uint8_t}
@MmuxDefineAccessorMutator{sint16,int16_t}
@MmuxDefineAccessorMutator{uint16,uint16_t}
@MmuxDefineAccessorMutator{sint32,int32_t}
@MmuxDefineAccessorMutator{uint32,uint32_t}
@MmuxDefineAccessorMutator{sint64,int64_t}
@MmuxDefineAccessorMutator{uint64,uint64_t}

@MmuxDefineAccessorMutator{ssize,ssize_t}
@MmuxDefineAccessorMutator{usize,size_t}
@MmuxDefineAccessorMutator{intmax, intmax_t}
@MmuxDefineAccessorMutator{intptr, intptr_t}
@MmuxDefineAccessorMutator{mode, mode_t}
@MmuxDefineAccessorMutator{off, off_t}
@MmuxDefineAccessorMutator{pid, pid_t}
@MmuxDefineAccessorMutator{uid, uid_t}
@MmuxDefineAccessorMutator{gid, gid_t}

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
the package @mbfl{} is available online:

@center @url{http://github.com/marcomaggi/mbfl/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

