\input texinfo.tex
@c %**start of header
@setfilename mmux-cc-types.info
@settitle MMUX CC Types
@c %**end of header

@c @include version.texi
@include mmux-version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      MMUX CC Types

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    MMUX CC Types

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-cc-types

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_CC_TYPES
@set PackagePkgconfigModule             mmux-cc-types
@set PackageLibsVar                     @env{MMUX_CC_TYPES_LIBS}
@set PackageCflagsVar                   @env{MMUX_CC_TYPES_CFLAGS}
@c This is the stem of the library in "libmmux-cc-types.so".
@set PackageLibstem                     mmux-cc-types
@set PackageApiPrefixLower              mmux_
@set PackageApiPrefixUpper              MMUX_

@set PackageHeader                      mmux-cc-types.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@ifinfo
@macro mbfl{}
@acronym{MBFL}
@end macro
@end ifinfo
@ifnotinfo
@macro mbfl{}
@acronym{mbfl}
@end macro
@end ifnotinfo

@ifinfo
@macro mmux{}
@acronym{MMUX}
@end macro
@end ifinfo
@ifnotinfo
@macro mmux{}
@acronym{mmux}
@end macro
@end ifnotinfo

@macro MmuxBuiltin{NAME}
@code{\NAME\}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{MmuxPkgSemanticVersion} of @value{PACKAGE}, a C11 language
library meant to be used in foreign functions interfaces for higher--level languages.

The package targets @posix{} platforms.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

Development of this package takes place at:

@center @value{GithubUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{MmuxPkgSemanticVersion}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-cc-types: (mmux-cc-types).       C11 language library handling core types.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* initialisation::              Library initialisation.
* config::                      How to configure code to link the library.
* typedefs::                    Type definitions.
* sizeof::                      Type sizes.
* limits::                      Type maximum and minimum values.
* string representations::      String representations of supported types.
* complex::                     Basic complex number operations.
* predicates::                  Type predicates.
* comparison::                  Comparison functions.
* arithmetics::                 Arithmetics operations.
* mathematics::                 Mathematics operations.
* bitwise::                     Bitwise operations.
* formats::                     Input and output formats.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{MmuxPkgSemanticVersion} of @value{PACKAGE}, a C11 language
library meant to be used in foreign functions interfaces for higher--level languages.

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
@value{PACKAGE} installs multiple header files, of which @value{PackageHeaderFile} is the main one,
exporting the whole library @api{}.  All the function names in the @api{} are prefixed with
@code{@value{PackageApiPrefixLower}}; all the preprocessor symbol names are prefixed with
@code{@value{PackageApiPrefixUpper}}; all the type names are prefixed with
@code{@value{PackageApiPrefixLower}} and suffixed with @code{_t}.

The library is installed under @code{$libdir}; for example:

@example
/usr/local/lib64/lib@value{PackageLibstem}.so
@end example

@noindent
C language header files are installed under @code{$includedir}, for example:

@example
/usr/local/include/@value{PackageHeaderFile}
@end example

@menu
* overview decimal::            Support for the @objtype{_DecimalN} types.
* overview stems::              Specifying C language types with their stem.
* overview errors::             Error handling.
* overview linking::            Linking code with the shared library.
@end menu

@c page
@node overview decimal
@section Support for the @objtype{_DecimalN} types


Support for the @objtype{_DecimalN} types is enabled if availability of such types is detected at
package--configuration time.  This package relies on the availability of the external package
@code{libdfp}.

@c page
@node overview stems
@section Specifying C language types with their stem


@cindex Type stems
@cindex @code{pointer}, type stem
@cindex @code{schar}, type stem
@cindex @code{uchar}, type stem
@cindex @code{sshort}, type stem
@cindex @code{ushort}, type stem
@cindex @code{sint}, type stem
@cindex @code{uint}, type stem
@cindex @code{slong}, type stem
@cindex @code{ulong}, type stem
@cindex @code{sllong}, type stem
@cindex @code{ullong}, type stem
@cindex @code{float}, type stem
@cindex @code{double}, type stem
@cindex @code{ldouble}, type stem

@cindex @code{float32}, type stem
@cindex @code{float64}, type stem
@cindex @code{float128}, type stem

@cindex @code{float32x}, type stem
@cindex @code{float64x}, type stem
@cindex @code{float128x}, type stem

@cindex @code{decimal32}, type stem
@cindex @code{decimal64}, type stem
@cindex @code{decimal128}, type stem

@cindex @code{complexf}, type stem
@cindex @code{complexd}, type stem
@cindex @code{complexld}, type stem

@cindex @code{complexf32}, type stem
@cindex @code{complexf64}, type stem
@cindex @code{complexf128}, type stem

@cindex @code{complexf32x}, type stem
@cindex @code{complexf64x}, type stem
@cindex @code{complexf128x}, type stem

@cindex @code{complexd32}, type stem
@cindex @code{complexd64}, type stem
@cindex @code{complexd128}, type stem

@cindex @code{sint8}, type stem
@cindex @code{uint8}, type stem
@cindex @code{sint16}, type stem
@cindex @code{uint16}, type stem
@cindex @code{sint32}, type stem
@cindex @code{uint32}, type stem
@cindex @code{sint64}, type stem
@cindex @code{uint64}, type stem

@cindex @code{ssize}, type stem
@cindex @code{usize}, type stem
@cindex @code{sintmax}, type stem
@cindex @code{uintmax}, type stem
@cindex @code{sintptr}, type stem
@cindex @code{uintptr}, type stem
@cindex @code{mode}, type stem
@cindex @code{off}, type stem
@cindex @code{pid}, type stem
@cindex @code{uid}, type stem
@cindex @code{gid}, type stem
@cindex @code{wchar}, type stem
@cindex @code{wint}, type stem


The following word definitions just alias the corresponding C language type; such uniform names are
useful when using preprocessor macros to generate code.

If @value{PACKAGE} supports a type: it blindly implements all the possible operations for it, even
when it looks like an operation does not make much sense.  A type is a type.

@macro MmuxDefineTypeStem{STEM,TYPE}
@deftp {Type Stem} \STEM\
Single--word specification of a C language type supported by this package.  It is an alias for the C
language type @code{\TYPE\}.
@end deftp

@end macro


@MmuxDefineTypeStem{pointer,void *}

@MmuxDefineTypeStem{schar,signed char}
@MmuxDefineTypeStem{uchar,unsigned char}
@MmuxDefineTypeStem{sshort,signed short int}
@MmuxDefineTypeStem{ushort,unsigned short int}
@MmuxDefineTypeStem{sint,signed int}
@MmuxDefineTypeStem{uint,unsigned int}
@MmuxDefineTypeStem{slong,signed long}
@MmuxDefineTypeStem{ulong,unsigned long}
@MmuxDefineTypeStem{sllong,signed long long}
@MmuxDefineTypeStem{ullong,unsigned long long}
@MmuxDefineTypeStem{float,float}
@MmuxDefineTypeStem{double,double}
@MmuxDefineTypeStem{ldouble,long double}

@MmuxDefineTypeStem{float32, _Float32}
@MmuxDefineTypeStem{float64, _Float64}
@MmuxDefineTypeStem{float128, _Float128}

@MmuxDefineTypeStem{float32x, _Float32x}
@MmuxDefineTypeStem{float64x, _Float64x}
@MmuxDefineTypeStem{float128x, _Float128x}

@MmuxDefineTypeStem{decimal32, _Decimal32}
@MmuxDefineTypeStem{decimal64, _Decimal64}
@MmuxDefineTypeStem{decimal128, _Decimal128}

@MmuxDefineTypeStem{complexf,float complex}
@MmuxDefineTypeStem{complexd,double complex}
@MmuxDefineTypeStem{complexld,long double complex}

@MmuxDefineTypeStem{complexf32, _Float32 complex}
@MmuxDefineTypeStem{complexf64, _Float64 complex}
@MmuxDefineTypeStem{complexf128, _Float128 complex}

@MmuxDefineTypeStem{complexf32x, _Float32 complex}
@MmuxDefineTypeStem{complexf64x, _Float64x complex}
@MmuxDefineTypeStem{complexf128x, _Float128x complex}

@deftp {Type Stem} complexd32
Single--word specification of a C language type supported by this package.  It is an alias for a
non--standard C language type implementing complex floating--point numbers having
@objtype{_Decimal32} values as real and imaginary parts.
@end deftp


@deftp {Type Stem} complexd64
Single--word specification of a C language type supported by this package.  It is an alias for a
non--standard C language type implementing complex floating--point numbers having
@objtype{_Decimal64} values as real and imaginary parts.
@end deftp


@deftp {Type Stem} complexd128
Single--word specification of a C language type supported by this package.  It is an alias for a
non--standard C language type implementing complex floating--point numbers having
@objtype{_Decimal128} values as real and imaginary parts.
@end deftp

@MmuxDefineTypeStem{sint8,int8_t}
@MmuxDefineTypeStem{uint8,uint8_t}
@MmuxDefineTypeStem{sint16,int16_t}
@MmuxDefineTypeStem{uint16,uint16_t}
@MmuxDefineTypeStem{sint32,int32_t}
@MmuxDefineTypeStem{uint32,uint32_t}
@MmuxDefineTypeStem{sint64,int64_t}
@MmuxDefineTypeStem{uint64,uint64_t}

@MmuxDefineTypeStem{ssize,ssize_t}
@MmuxDefineTypeStem{usize,size_t}
@MmuxDefineTypeStem{sintmax, intmax_t}
@MmuxDefineTypeStem{uintmax, uintmax_t}
@MmuxDefineTypeStem{sintptr, intptr_t}
@MmuxDefineTypeStem{uintptr, uintptr_t}
@MmuxDefineTypeStem{mode, mode_t}
@MmuxDefineTypeStem{off, off_t}
@MmuxDefineTypeStem{pid, pid_t}
@MmuxDefineTypeStem{uid, uid_t}
@MmuxDefineTypeStem{gid, gid_t}
@MmuxDefineTypeStem{wchar, wchar_t}
@MmuxDefineTypeStem{wint, wint_t}

@c page
@node overview errors
@section Error handling


Most of the functions that can fail return a @objtype{bool} value: @cfalse{} when successful;
@ctrue{} when an error occurs.

The functions @cfunc{*_sprint_size} return @samp{-1} when an error occurred.

@c page

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_cc_types_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_cc_types_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_cc_types_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_cc_types_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node initialisation
@chapter Library initialisation


@deftypefun bool mmux_cc_types_init (void)
Initialise library's internal state.  When successful return @cfalse{}; otherwise return @ctrue{}.
@end deftypefun

@c page
@node config
@chapter How to configure code to link the library


It happens that some rare platform may not implement the C language types @objtype{signed long long
int}, @objtype{unsigned long long int} and @objtype{long double}; more platforms may not implement
the extension types @objtype{_FloatN} and @objtype{_FloatNx}, which usually are:

@example
_Float32
_Float64
_Float128
_Float32x
_Float64x
_Float128x
@end example

@noindent
even more platforms may not implement the extension types @objtype{_DecimalN}, which usually are:

@example
_Decimal32
_Decimal64
_Decimal128
@end example

@noindent
these types are supported by @value{PACKAGE}.

This package assumes that: if the real floating--point types are supported, the corresponding
complex floating--point types are also supported; so the following types are supported:

@example
_Float32 complex
_Float64 complex
_Float128 complex
_Float32x complex
_Float64x complex
_Float128x complex
@end example

This package implements complex floating--point numbers whose real and imaginary parts are
@objtype{_DecimalN} numbers through a custom data structure.  Such support does not implement all
the usual functions.

At package--configuration time: @value{PACKAGE} tries to determine if these types are supported and
it defines the following symbols in its header files.

@c ------------------------------------------------------------------------

We can use the following C preprocessor symbols with code like:

@example
#if ((defined MMUX_HAVE_CC_TYPE_LDOUBLE) && (1 == MMUX_HAVE_CC_TYPE_LDOUBLE))
... /* the type is available */
#endif
@end example

@macro MmuxDefineCppSymbolHaveType{CPPSTEM}
@defvr {C Preprocessor Symbol} MMUX_HAVE_CC_TYPE_\CPPSTEM\
If this preprocessor symbol is defined and its use expands to @samp{1}: the corresponding C language
type is supported.
@end defvr

@end macro

@MmuxDefineCppSymbolHaveType{SLLONG}
@MmuxDefineCppSymbolHaveType{ULLONG}
@MmuxDefineCppSymbolHaveType{LDOUBLE}
@MmuxDefineCppSymbolHaveType{FLOAT32}
@MmuxDefineCppSymbolHaveType{FLOAT64}
@MmuxDefineCppSymbolHaveType{FLOAT128}
@MmuxDefineCppSymbolHaveType{FLOAT32X}
@MmuxDefineCppSymbolHaveType{FLOAT64X}
@MmuxDefineCppSymbolHaveType{FLOAT128X}
@MmuxDefineCppSymbolHaveType{DECIMAL32}
@MmuxDefineCppSymbolHaveType{DECIMAL64}
@MmuxDefineCppSymbolHaveType{DECIMAL128}
@MmuxDefineCppSymbolHaveType{COMPLEXF32}
@MmuxDefineCppSymbolHaveType{COMPLEXF64}
@MmuxDefineCppSymbolHaveType{COMPLEXF128}
@MmuxDefineCppSymbolHaveType{COMPLEXF32X}
@MmuxDefineCppSymbolHaveType{COMPLEXF64X}
@MmuxDefineCppSymbolHaveType{COMPLEXF128X}
@MmuxDefineCppSymbolHaveType{COMPLEXD32}
@MmuxDefineCppSymbolHaveType{COMPLEXD64}
@MmuxDefineCppSymbolHaveType{COMPLEXD128}

@c page
@node typedefs
@chapter Type definitions


@cindex Type stems
@cindex @code{pointer}, type stem
@cindex @code{schar}, type stem
@cindex @code{uchar}, type stem
@cindex @code{sshort}, type stem
@cindex @code{ushort}, type stem
@cindex @code{sint}, type stem
@cindex @code{uint}, type stem
@cindex @code{slong}, type stem
@cindex @code{ulong}, type stem
@cindex @code{sllong}, type stem
@cindex @code{ullong}, type stem
@cindex @code{float}, type stem
@cindex @code{double}, type stem
@cindex @code{ldouble}, type stem

@cindex @code{float32}, type stem
@cindex @code{float64}, type stem
@cindex @code{float128}, type stem

@cindex @code{float32x}, type stem
@cindex @code{float64x}, type stem
@cindex @code{float128x}, type stem

@cindex @code{decimal32}, type stem
@cindex @code{decimal64}, type stem
@cindex @code{decimal128}, type stem

@cindex @code{complexf}, type stem
@cindex @code{complexd}, type stem
@cindex @code{complexld}, type stem

@cindex @code{complexf32}, type stem
@cindex @code{complexf64}, type stem
@cindex @code{complexf128}, type stem

@cindex @code{complexf32x}, type stem
@cindex @code{complexf64x}, type stem
@cindex @code{complexf128x}, type stem

@cindex @code{complexd32}, type stem
@cindex @code{complexd64}, type stem
@cindex @code{complexd128}, type stem

@cindex @code{sint8}, type stem
@cindex @code{uint8}, type stem
@cindex @code{sint16}, type stem
@cindex @code{uint16}, type stem
@cindex @code{sint32}, type stem
@cindex @code{uint32}, type stem
@cindex @code{sint64}, type stem
@cindex @code{uint64}, type stem

@cindex @code{ssize}, type stem
@cindex @code{usize}, type stem
@cindex @code{sintmax}, type stem
@cindex @code{uintmax}, type stem
@cindex @code{sintptr}, type stem
@cindex @code{uintptr}, type stem
@cindex @code{mode}, type stem
@cindex @code{off}, type stem
@cindex @code{pid}, type stem
@cindex @code{uid}, type stem
@cindex @code{gid}, type stem
@cindex @code{wchar}, type stem
@cindex @code{wint}, type stem


The following type definitions just alias the corresponding C language type; the type name is
composed from a ``stem'': a single word representing the name of the type.  Such uniform names are
useful when using preprocessor macros to generate code.

@macro MmuxDefineCAliasTypedef{STEM,TYPE}
@deftp {Typedef} mmux_\STEM\_t
Type definition aliasing the C language type @objtype{\TYPE\}.
@end deftp

@end macro

@macro MmuxDefineCAliasTypedefPart{COMPLEXSTEM,PARTSTEM}
@deftp {Typedef} mmux_\COMPLEXSTEM\_part_t
Type definition aliasing the C language type @objtype{mmux_\PARTSTEM\_t}, representing the real and
imaginary parts type of @objtype{mmux_\COMPLEXSTEM\_t}.
@end deftp

@end macro

@c ------------------------------------------------------------------------

@MmuxDefineCAliasTypedef{pointer,void *}

@MmuxDefineCAliasTypedef{schar,signed char}
@MmuxDefineCAliasTypedef{uchar,unsigned char}
@MmuxDefineCAliasTypedef{sshort,signed short int}
@MmuxDefineCAliasTypedef{ushort,unsigned short int}
@MmuxDefineCAliasTypedef{sint,signed int}
@MmuxDefineCAliasTypedef{uint,unsigned int}
@MmuxDefineCAliasTypedef{slong,signed long}
@MmuxDefineCAliasTypedef{ulong,unsigned long}
@MmuxDefineCAliasTypedef{sllong,signed long long}
@MmuxDefineCAliasTypedef{ullong,unsigned long long}
@MmuxDefineCAliasTypedef{float,float}
@MmuxDefineCAliasTypedef{double,double}
@MmuxDefineCAliasTypedef{ldouble,long double}

@MmuxDefineCAliasTypedef{float32, _Float32}
@MmuxDefineCAliasTypedef{float64, _Float64}
@MmuxDefineCAliasTypedef{float128, _Float128}

@MmuxDefineCAliasTypedef{float32x, _Float32x}
@MmuxDefineCAliasTypedef{float64x, _Float64x}
@MmuxDefineCAliasTypedef{float128x, _Float128x}

@MmuxDefineCAliasTypedef{decimal32, _Decimal32}
@MmuxDefineCAliasTypedef{decimal64, _Decimal64}
@MmuxDefineCAliasTypedef{decimal128, _Decimal128}

@MmuxDefineCAliasTypedef{complexf,float complex}
@MmuxDefineCAliasTypedef{complexd,double complex}
@MmuxDefineCAliasTypedef{complexld,long double complex}

@MmuxDefineCAliasTypedef{complexf32, _Float32 complex}
@MmuxDefineCAliasTypedef{complexf64, _Float64 complex}
@MmuxDefineCAliasTypedef{complexf128, _Float128 complex}

@MmuxDefineCAliasTypedef{complexf32x, _Float32x complex}
@MmuxDefineCAliasTypedef{complexf64x, _Float64x complex}
@MmuxDefineCAliasTypedef{complexf128x, _Float128x complex}

@deftp {Typedef} mmux_complexd32_t
Non--standard type definition representing a complex floating--point number whose real and imaginary
parts are values of type @objtype{mmux_decimal32_t}.
@end deftp

@deftp {Typedef} mmux_complexd64_t
Non--standard type definition representing a complex floating--point number whose real and imaginary
parts are values of type @objtype{mmux_decimal64_t}.
@end deftp

@deftp {Typedef} mmux_complexd128_t
Non--standard type definition representing a complex floating--point number whose real and imaginary
parts are values of type @objtype{mmux_decimal128_t}.
@end deftp

@MmuxDefineCAliasTypedef{sint8,int8_t}
@MmuxDefineCAliasTypedef{uint8,uint8_t}
@MmuxDefineCAliasTypedef{sint16,int16_t}
@MmuxDefineCAliasTypedef{uint16,uint16_t}
@MmuxDefineCAliasTypedef{sint32,int32_t}
@MmuxDefineCAliasTypedef{uint32,uint32_t}
@MmuxDefineCAliasTypedef{sint64,int64_t}
@MmuxDefineCAliasTypedef{uint64,uint64_t}

@MmuxDefineCAliasTypedef{ssize,ssize_t}
@MmuxDefineCAliasTypedef{usize,size_t}
@MmuxDefineCAliasTypedef{sintmax, intmax_t}
@MmuxDefineCAliasTypedef{uintmax, uintmax_t}
@MmuxDefineCAliasTypedef{sintptr, intptr_t}
@MmuxDefineCAliasTypedef{uintptr, uintptr_t}
@MmuxDefineCAliasTypedef{mode, mode_t}
@MmuxDefineCAliasTypedef{off, off_t}
@MmuxDefineCAliasTypedef{pid, pid_t}
@MmuxDefineCAliasTypedef{uid, uid_t}
@MmuxDefineCAliasTypedef{gid, gid_t}
@MmuxDefineCAliasTypedef{wchar, wchar_t}
@MmuxDefineCAliasTypedef{wint, wint_t}


@MmuxDefineCAliasTypedefPart{complexf,float}
@MmuxDefineCAliasTypedefPart{complexd,double}
@MmuxDefineCAliasTypedefPart{complexld,ldouble}

@MmuxDefineCAliasTypedefPart{complexf32, float32}
@MmuxDefineCAliasTypedefPart{complexf64, float64}
@MmuxDefineCAliasTypedefPart{complexf128, float128}

@MmuxDefineCAliasTypedefPart{complexf32x, float32x}
@MmuxDefineCAliasTypedefPart{complexf64x, float64x}
@MmuxDefineCAliasTypedefPart{complexf128x, float128x}

@MmuxDefineCAliasTypedefPart{complexd32, decimal32}
@MmuxDefineCAliasTypedefPart{complexd64, decimal64}
@MmuxDefineCAliasTypedefPart{complexd128, decimal128}

@c page
@node sizeof
@chapter Type size measured in bytes


@macro MmuxDefineCFunctionSizeof{STEM}
@deftypefun int mmux_\STEM\_sizeof (void)
Return a positive integer representing the size in bytes of the C language type
@objtype{mmux_\STEM\_t}.
@end deftypefun

@end macro


@MmuxDefineCFunctionSizeof{pointer}

@MmuxDefineCFunctionSizeof{schar}
@MmuxDefineCFunctionSizeof{uchar}
@MmuxDefineCFunctionSizeof{sshort}
@MmuxDefineCFunctionSizeof{ushort}
@MmuxDefineCFunctionSizeof{sint}
@MmuxDefineCFunctionSizeof{uint}
@MmuxDefineCFunctionSizeof{slong}
@MmuxDefineCFunctionSizeof{ulong}
@MmuxDefineCFunctionSizeof{sllong}
@MmuxDefineCFunctionSizeof{ullong}
@MmuxDefineCFunctionSizeof{float}
@MmuxDefineCFunctionSizeof{double}
@MmuxDefineCFunctionSizeof{ldouble}

@MmuxDefineCFunctionSizeof{float32}
@MmuxDefineCFunctionSizeof{float64}
@MmuxDefineCFunctionSizeof{float128}

@MmuxDefineCFunctionSizeof{float32x}
@MmuxDefineCFunctionSizeof{float64x}
@MmuxDefineCFunctionSizeof{float128x}

@MmuxDefineCFunctionSizeof{decimal32}
@MmuxDefineCFunctionSizeof{decimal64}
@MmuxDefineCFunctionSizeof{decimal128}

@MmuxDefineCFunctionSizeof{complexf}
@MmuxDefineCFunctionSizeof{complexd}
@MmuxDefineCFunctionSizeof{complexld}

@MmuxDefineCFunctionSizeof{complexf32}
@MmuxDefineCFunctionSizeof{complexf64}
@MmuxDefineCFunctionSizeof{complexf128}

@MmuxDefineCFunctionSizeof{complexf32x}
@MmuxDefineCFunctionSizeof{complexf64x}
@MmuxDefineCFunctionSizeof{complexf128x}

@MmuxDefineCFunctionSizeof{complexd32}
@MmuxDefineCFunctionSizeof{complexd64}
@MmuxDefineCFunctionSizeof{complexd128}

@MmuxDefineCFunctionSizeof{sint8}
@MmuxDefineCFunctionSizeof{uint8}
@MmuxDefineCFunctionSizeof{sint16}
@MmuxDefineCFunctionSizeof{uint16}
@MmuxDefineCFunctionSizeof{sint32}
@MmuxDefineCFunctionSizeof{uint32}
@MmuxDefineCFunctionSizeof{sint64}
@MmuxDefineCFunctionSizeof{uint64}

@MmuxDefineCFunctionSizeof{ssize}
@MmuxDefineCFunctionSizeof{usize}
@MmuxDefineCFunctionSizeof{sintmax}
@MmuxDefineCFunctionSizeof{uintmax}
@MmuxDefineCFunctionSizeof{sintptr}
@MmuxDefineCFunctionSizeof{uintptr}
@MmuxDefineCFunctionSizeof{mode}
@MmuxDefineCFunctionSizeof{off}
@MmuxDefineCFunctionSizeof{pid}
@MmuxDefineCFunctionSizeof{uid}
@MmuxDefineCFunctionSizeof{gid}
@MmuxDefineCFunctionSizeof{wchar}
@MmuxDefineCFunctionSizeof{wint}

@c page
@node limits
@chapter Type maximum and minimum values


The following functions return the maximum and minimum values representable by a C language real
number type; this is true even for floating--point numbers: the returned minimum value is the
minimum negative representable value.  This is different from the standard C language constants like
@code{FLT_MIN}, @code{DBL_MIN}, @code{LDBL_MIN}, which represent some sort of minimum representable
positive value.


@macro MmuxDefineCFunctionMaximum{STEM}
@deftypefun mmux_\STEM\_t mmux_\STEM\_maximum (void)
@deftypefunx mmux_\STEM\_t mmux_\STEM\_minimum (void)
Return the maximum and minimum values representable by the range of values of the type
@objtype{mmux_\STEM\_t}.
@end deftypefun

@end macro


@MmuxDefineCFunctionMaximum{pointer}

@MmuxDefineCFunctionMaximum{schar}
@MmuxDefineCFunctionMaximum{uchar}
@MmuxDefineCFunctionMaximum{sshort}
@MmuxDefineCFunctionMaximum{ushort}
@MmuxDefineCFunctionMaximum{sint}
@MmuxDefineCFunctionMaximum{uint}
@MmuxDefineCFunctionMaximum{slong}
@MmuxDefineCFunctionMaximum{ulong}
@MmuxDefineCFunctionMaximum{sllong}
@MmuxDefineCFunctionMaximum{ullong}
@MmuxDefineCFunctionMaximum{float}
@MmuxDefineCFunctionMaximum{double}
@MmuxDefineCFunctionMaximum{ldouble}

@MmuxDefineCFunctionMaximum{float32}
@MmuxDefineCFunctionMaximum{float64}
@MmuxDefineCFunctionMaximum{float128}

@MmuxDefineCFunctionMaximum{float32x}
@MmuxDefineCFunctionMaximum{float64x}
@MmuxDefineCFunctionMaximum{float128x}

@MmuxDefineCFunctionMaximum{decimal32}
@MmuxDefineCFunctionMaximum{decimal64}
@MmuxDefineCFunctionMaximum{decimal128}

@MmuxDefineCFunctionMaximum{sint8}
@MmuxDefineCFunctionMaximum{uint8}
@MmuxDefineCFunctionMaximum{sint16}
@MmuxDefineCFunctionMaximum{uint16}
@MmuxDefineCFunctionMaximum{sint32}
@MmuxDefineCFunctionMaximum{uint32}
@MmuxDefineCFunctionMaximum{sint64}
@MmuxDefineCFunctionMaximum{uint64}

@MmuxDefineCFunctionMaximum{ssize}
@MmuxDefineCFunctionMaximum{usize}
@MmuxDefineCFunctionMaximum{sintmax}
@MmuxDefineCFunctionMaximum{uintmax}
@MmuxDefineCFunctionMaximum{sintptr}
@MmuxDefineCFunctionMaximum{uintptr}
@MmuxDefineCFunctionMaximum{mode}
@MmuxDefineCFunctionMaximum{off}
@MmuxDefineCFunctionMaximum{pid}
@MmuxDefineCFunctionMaximum{uid}
@MmuxDefineCFunctionMaximum{gid}
@MmuxDefineCFunctionMaximum{wchar}
@MmuxDefineCFunctionMaximum{wint}

@c page
@node string representations
@chapter String representations of supported types


@menu
* string predicates::           Type predicates for string representations.
* string parsers::              Parsing string representations of C language types.
* string sprinters::            Printing string representations of C language types.
@end menu

@c page
@node string predicates
@section Type predicates for string representations


@macro MmuxDefineCFunctionPredicate{STEM}
@deftypefun bool mmux_string_is_\STEM\ (char const * @var{str})
Return @ctrue{} if @var{str} references the string representation, in @asciiz{} format, of a value
of type @objtype{mmux_\STEM\_t}; otherwise return @cfalse{}.
@end deftypefun

@end macro


@MmuxDefineCFunctionPredicate{pointer}

@MmuxDefineCFunctionPredicate{schar}
@MmuxDefineCFunctionPredicate{uchar}
@MmuxDefineCFunctionPredicate{sshort}
@MmuxDefineCFunctionPredicate{ushort}
@MmuxDefineCFunctionPredicate{sint}
@MmuxDefineCFunctionPredicate{uint}
@MmuxDefineCFunctionPredicate{slong}
@MmuxDefineCFunctionPredicate{ulong}
@MmuxDefineCFunctionPredicate{sllong}
@MmuxDefineCFunctionPredicate{ullong}
@MmuxDefineCFunctionPredicate{float}
@MmuxDefineCFunctionPredicate{double}
@MmuxDefineCFunctionPredicate{ldouble}

@MmuxDefineCFunctionPredicate{float32}
@MmuxDefineCFunctionPredicate{float64}
@MmuxDefineCFunctionPredicate{float128}

@MmuxDefineCFunctionPredicate{float32x}
@MmuxDefineCFunctionPredicate{float64x}
@MmuxDefineCFunctionPredicate{float128x}

@MmuxDefineCFunctionPredicate{decimal32}
@MmuxDefineCFunctionPredicate{decimal64}
@MmuxDefineCFunctionPredicate{decimal128}

@MmuxDefineCFunctionPredicate{complexf}
@MmuxDefineCFunctionPredicate{complexd}
@MmuxDefineCFunctionPredicate{complexld}

@MmuxDefineCFunctionPredicate{complexf32}
@MmuxDefineCFunctionPredicate{complexf64}
@MmuxDefineCFunctionPredicate{complexf128}

@MmuxDefineCFunctionPredicate{complexf32x}
@MmuxDefineCFunctionPredicate{complexf64x}
@MmuxDefineCFunctionPredicate{complexf128x}

@MmuxDefineCFunctionPredicate{complexd32}
@MmuxDefineCFunctionPredicate{complexd64}
@MmuxDefineCFunctionPredicate{complexd128}

@MmuxDefineCFunctionPredicate{sint8}
@MmuxDefineCFunctionPredicate{uint8}
@MmuxDefineCFunctionPredicate{sint16}
@MmuxDefineCFunctionPredicate{uint16}
@MmuxDefineCFunctionPredicate{sint32}
@MmuxDefineCFunctionPredicate{uint32}
@MmuxDefineCFunctionPredicate{sint64}
@MmuxDefineCFunctionPredicate{uint64}

@MmuxDefineCFunctionPredicate{ssize}
@MmuxDefineCFunctionPredicate{usize}
@MmuxDefineCFunctionPredicate{sintmax}
@MmuxDefineCFunctionPredicate{uintmax}
@MmuxDefineCFunctionPredicate{sintptr}
@MmuxDefineCFunctionPredicate{uintptr}
@MmuxDefineCFunctionPredicate{mode}
@MmuxDefineCFunctionPredicate{off}
@MmuxDefineCFunctionPredicate{pid}
@MmuxDefineCFunctionPredicate{uid}
@MmuxDefineCFunctionPredicate{gid}
@MmuxDefineCFunctionPredicate{wchar}
@MmuxDefineCFunctionPredicate{wint}

@c page
@node string parsers
@section Parsing string representations of C language types


Type parsers convert string representations to C language values; to parse a @objtype{mmuc_sint_t}
representation we do:

@example
char const *    arg = "123";
mmux_sint_t     value;
bool            rv;

rv = mmux_sint_parse(&value, arg, __func__);
@end example


@macro MmuxDefineCFunctionParser{STEM}
@deftypefun bool mmux_\STEM\_parse (mmux_\STEM\_t * @var{PTR}, char const * @var{STR}, char const * @var{WHO})
Parse a string which is meant to be the representation of a C language type @objtype{\STEM\}; when
successful store the result in the variable referenced by @var{PTR}, then return @cfalse{};
otherwise leave @var{PTR} untouched and return @ctrue{}.

In case of failure: if @var{WHO} is not @cnull{}, print on @stderr{} a message describing the
parsing error; @var{WHO} must reference an @asciiz{} string representing the entity that requested
the parsing operation, for example: the name of a C function.
@end deftypefun

@end macro


@MmuxDefineCFunctionParser{pointer}

@MmuxDefineCFunctionParser{schar}
@MmuxDefineCFunctionParser{uchar}
@MmuxDefineCFunctionParser{sshort}
@MmuxDefineCFunctionParser{ushort}
@MmuxDefineCFunctionParser{sint}
@MmuxDefineCFunctionParser{uint}
@MmuxDefineCFunctionParser{slong}
@MmuxDefineCFunctionParser{ulong}
@MmuxDefineCFunctionParser{sllong}
@MmuxDefineCFunctionParser{ullong}
@MmuxDefineCFunctionParser{float}
@MmuxDefineCFunctionParser{double}
@MmuxDefineCFunctionParser{ldouble}

@MmuxDefineCFunctionParser{float32}
@MmuxDefineCFunctionParser{float64}
@MmuxDefineCFunctionParser{float128}

@MmuxDefineCFunctionParser{float32x}
@MmuxDefineCFunctionParser{float64x}
@MmuxDefineCFunctionParser{float128x}

@MmuxDefineCFunctionParser{decimal32}
@MmuxDefineCFunctionParser{decimal64}
@MmuxDefineCFunctionParser{decimal128}

@MmuxDefineCFunctionParser{complexf}
@MmuxDefineCFunctionParser{complexd}
@MmuxDefineCFunctionParser{complexld}

@MmuxDefineCFunctionParser{complexf32}
@MmuxDefineCFunctionParser{complexf64}
@MmuxDefineCFunctionParser{complexf128}

@MmuxDefineCFunctionParser{complexf32x}
@MmuxDefineCFunctionParser{complexf64x}
@MmuxDefineCFunctionParser{complexf128x}

@MmuxDefineCFunctionParser{complexd32}
@MmuxDefineCFunctionParser{complexd64}
@MmuxDefineCFunctionParser{complexd128}

@MmuxDefineCFunctionParser{sint8}
@MmuxDefineCFunctionParser{uint8}
@MmuxDefineCFunctionParser{sint16}
@MmuxDefineCFunctionParser{uint16}
@MmuxDefineCFunctionParser{sint32}
@MmuxDefineCFunctionParser{uint32}
@MmuxDefineCFunctionParser{sint64}
@MmuxDefineCFunctionParser{uint64}

@MmuxDefineCFunctionParser{ssize}
@MmuxDefineCFunctionParser{usize}
@MmuxDefineCFunctionParser{sintmax}
@MmuxDefineCFunctionParser{uintmax}
@MmuxDefineCFunctionParser{sintptr}
@MmuxDefineCFunctionParser{uintptr}
@MmuxDefineCFunctionParser{mode}
@MmuxDefineCFunctionParser{off}
@MmuxDefineCFunctionParser{pid}
@MmuxDefineCFunctionParser{uid}
@MmuxDefineCFunctionParser{gid}
@MmuxDefineCFunctionParser{wchar}
@MmuxDefineCFunctionParser{wint}

@c page
@node string sprinters
@section Printing string representations of C language types


Type string printers convert binary representations of C language values to string representations;
to print a @objtype{mmux_sint_t} string representation we do:

@example
mmux_sint_t     value = 123;
int             required_nbytes;

required_nbytes = mmux_sint_sprint_size(value);
if (0 > required_nbytes) @{
  /* error */
@} else @{
  char    str[required_nbytes];
  bool    rv;

  rv = mmux_sint_sprint(str, required_nbytes, value);
@}
@end example


@macro MmuxDefineCFunctionSprinter{STEM}
@deftypefun bool mmux_\STEM\_sprint (char * @var{STRPTR}, int @var{LEN}, mmux_\STEM\_t @var{VALUE})
@deftypefunx int mmux_\STEM\_sprint_size (mmux_\STEM\_t @var{VALUE})
The @samp{sprint} function generates a string representation of @var{VALUE} and stores it, in
@asciiz{} format, in the string referenced by @var{STRPTR}, which can hold at most @var{LEN}
characters (terminating zero included).  When successful return @cfalse{}; otherwise leave
@var{STRPTR} untouched and return @ctrue{}.

The @samp{sprint_size} function computes how many characters are needed to hold the string
representation of @var{VALUE}.  When successful returns the number of characters, @strong{including
the terminating zero}; otherwise return @samp{-1}.
@end deftypefun

@end macro


@MmuxDefineCFunctionSprinter{pointer}

@MmuxDefineCFunctionSprinter{schar}
@MmuxDefineCFunctionSprinter{uchar}
@MmuxDefineCFunctionSprinter{sshort}
@MmuxDefineCFunctionSprinter{ushort}
@MmuxDefineCFunctionSprinter{sint}
@MmuxDefineCFunctionSprinter{uint}
@MmuxDefineCFunctionSprinter{slong}
@MmuxDefineCFunctionSprinter{ulong}
@MmuxDefineCFunctionSprinter{sllong}
@MmuxDefineCFunctionSprinter{ullong}
@MmuxDefineCFunctionSprinter{float}
@MmuxDefineCFunctionSprinter{double}
@MmuxDefineCFunctionSprinter{ldouble}

@MmuxDefineCFunctionSprinter{float32}
@MmuxDefineCFunctionSprinter{float64}
@MmuxDefineCFunctionSprinter{float128}

@MmuxDefineCFunctionSprinter{float32x}
@MmuxDefineCFunctionSprinter{float64x}
@MmuxDefineCFunctionSprinter{float128x}

@MmuxDefineCFunctionSprinter{decimal32}
@MmuxDefineCFunctionSprinter{decimal64}
@MmuxDefineCFunctionSprinter{decimal128}

@MmuxDefineCFunctionSprinter{complexf}
@MmuxDefineCFunctionSprinter{complexd}
@MmuxDefineCFunctionSprinter{complexld}

@MmuxDefineCFunctionSprinter{complexf32}
@MmuxDefineCFunctionSprinter{complexf64}
@MmuxDefineCFunctionSprinter{complexf128}

@MmuxDefineCFunctionSprinter{complexf32x}
@MmuxDefineCFunctionSprinter{complexf64x}
@MmuxDefineCFunctionSprinter{complexf128x}

@MmuxDefineCFunctionSprinter{complexd32}
@MmuxDefineCFunctionSprinter{complexd64}
@MmuxDefineCFunctionSprinter{complexd128}

@MmuxDefineCFunctionSprinter{sint8}
@MmuxDefineCFunctionSprinter{uint8}
@MmuxDefineCFunctionSprinter{sint16}
@MmuxDefineCFunctionSprinter{uint16}
@MmuxDefineCFunctionSprinter{sint32}
@MmuxDefineCFunctionSprinter{uint32}
@MmuxDefineCFunctionSprinter{sint64}
@MmuxDefineCFunctionSprinter{uint64}

@MmuxDefineCFunctionSprinter{ssize}
@MmuxDefineCFunctionSprinter{usize}
@MmuxDefineCFunctionSprinter{sintmax}
@MmuxDefineCFunctionSprinter{uintmax}
@MmuxDefineCFunctionSprinter{sintptr}
@MmuxDefineCFunctionSprinter{uintptr}
@MmuxDefineCFunctionSprinter{mode}
@MmuxDefineCFunctionSprinter{off}
@MmuxDefineCFunctionSprinter{pid}
@MmuxDefineCFunctionSprinter{uid}
@MmuxDefineCFunctionSprinter{gid}
@MmuxDefineCFunctionSprinter{wchar}
@MmuxDefineCFunctionSprinter{wint}

@c page
@node complex
@chapter Basic complex number operations


@menu
* complex make::        Constructing complex numbers.
* complex parts::       Extracting the real and imaginary parts.
* complex abs::         Computing the absolute value.
* complex arg::         Computing the argument value.
* complex conj::        Computing the complex conjugate value.
@end menu

@c page
@node complex make
@section Constructing complex numbers


To construct a complex number from its real and imaginary parts, we do:

@example
mmux_double_t   rep = 1.2;
mmux_double_t   imp = 3.4;
mmux_complexd_t Z;

Z = mmux_complexd_make_rectangular(rep, imp);
@end example


@macro MmuxDefineComplexMakeRectangularBuiltin{CPLXSTEM,REALSTEM}
@deftypefun mmux_\CPLXSTEM\_t mmux_\CPLXSTEM\_make_rectangular (mmux_\REALSTEM\_t @var{REP}, mmux_\REALSTEM\_t @var{IMP})
Construct a complex number, of type @objtype{\CPLXSTEM\}, from the real and imaginary parts
@var{REP} and @var{IMP}, of type @objtype{\REALSTEM\}.  Return the result.
@end deftypefun

@end macro

@MmuxDefineComplexMakeRectangularBuiltin{complexf, float}
@MmuxDefineComplexMakeRectangularBuiltin{complexd, double}
@MmuxDefineComplexMakeRectangularBuiltin{complexld, ldouble}

@MmuxDefineComplexMakeRectangularBuiltin{complexf32, float32}
@MmuxDefineComplexMakeRectangularBuiltin{complexf64, float64}
@MmuxDefineComplexMakeRectangularBuiltin{complexf128, float128}

@MmuxDefineComplexMakeRectangularBuiltin{complexf32x, float32x}
@MmuxDefineComplexMakeRectangularBuiltin{complexf64x, float64x}
@MmuxDefineComplexMakeRectangularBuiltin{complexf128x, float128x}

@MmuxDefineComplexMakeRectangularBuiltin{complexd32, decimal32}
@MmuxDefineComplexMakeRectangularBuiltin{complexd64, decimal64}
@MmuxDefineComplexMakeRectangularBuiltin{complexd128, decimal128}

@c page
@node complex parts
@section Extracting the real and imaginary parts


To extract the real and imaginary parts from a complex number we do:

@example
mmux_complexd_t Z = ...;
mmux_double_t   rep;
mmux_double_t   imp;

rep = mmux_complexd_real_part(Z);
imp = mmux_complexd_real_part(Z);
@end example


@macro MmuxDefineComplexRealImagPartBuiltin{CPLXSTEM,REALSTEM}
@deftypefun Builtin mmux_\REALSTEM\_t mmux_\CPLXSTEM\_real_part (mmux_\CPLXSTEM\_t @var{OP})
@deftypefunx Builtin mmux_\REALSTEM\_t mmux_\CPLXSTEM\_imag_part (mmux_\CPLXSTEM\_t @var{OP})
Extract and return the real or imaginary parts from the complex number @var{OP}.
@end deftypefun

@end macro

@MmuxDefineComplexRealImagPartBuiltin{complexf, float}
@MmuxDefineComplexRealImagPartBuiltin{complexd, double}
@MmuxDefineComplexRealImagPartBuiltin{complexld, ldouble}

@MmuxDefineComplexRealImagPartBuiltin{complexf32, float32}
@MmuxDefineComplexRealImagPartBuiltin{complexf64, float64}
@MmuxDefineComplexRealImagPartBuiltin{complexf128, float128}

@MmuxDefineComplexRealImagPartBuiltin{complexf32x, float32x}
@MmuxDefineComplexRealImagPartBuiltin{complexf64x, float64x}
@MmuxDefineComplexRealImagPartBuiltin{complexf128x, float128x}

@MmuxDefineComplexRealImagPartBuiltin{complexd32, decimal32}
@MmuxDefineComplexRealImagPartBuiltin{complexd64, decimal64}
@MmuxDefineComplexRealImagPartBuiltin{complexd128, decimal128}

@c page
@node complex abs
@section Computing the absolute value


@macro MmuxDefineComplexAbsBuiltin{CPLXSTEM,REALSTEM}
@deftypefun mmux_\REALSTEM\_t mmux_\CPLXSTEM\_abs (mmux_\CPLXSTEM\_t @var{OP})
Compute and return the absolute value of the complex number @var{OP}.
@end deftypefun

@end macro

@MmuxDefineComplexAbsBuiltin{complexf, float}
@MmuxDefineComplexAbsBuiltin{complexd, double}
@MmuxDefineComplexAbsBuiltin{complexld, ldouble}

@MmuxDefineComplexAbsBuiltin{complexf32, float32}
@MmuxDefineComplexAbsBuiltin{complexf64, float64}
@MmuxDefineComplexAbsBuiltin{complexf128, float128}

@MmuxDefineComplexAbsBuiltin{complexf32x, float32x}
@MmuxDefineComplexAbsBuiltin{complexf64x, float64x}
@MmuxDefineComplexAbsBuiltin{complexf128x, float128x}

@MmuxDefineComplexAbsBuiltin{complexd32, decimal32}
@MmuxDefineComplexAbsBuiltin{complexd64, decimal64}
@MmuxDefineComplexAbsBuiltin{complexd128, decimal128}

@c page
@node complex arg
@section Computing the argument value


@macro MmuxDefineComplexArgBuiltin{CPLXSTEM,REALSTEM}
@deftypefun mmux_\REALSTEM\_t mmux_\CPLXSTEM\_arg (mmux_\CPLXSTEM\_t @var{OP})
Compute and return the argument value of the complex number @var{OP}.
@end deftypefun

@end macro

@MmuxDefineComplexArgBuiltin{complexf, float}
@MmuxDefineComplexArgBuiltin{complexd, double}
@MmuxDefineComplexArgBuiltin{complexld, ldouble}

@MmuxDefineComplexArgBuiltin{complexf32, float32}
@MmuxDefineComplexArgBuiltin{complexf64, float64}
@MmuxDefineComplexArgBuiltin{complexf128, float128}

@MmuxDefineComplexArgBuiltin{complexf32x, float32x}
@MmuxDefineComplexArgBuiltin{complexf64x, float64x}
@MmuxDefineComplexArgBuiltin{complexf128x, float128x}

@MmuxDefineComplexArgBuiltin{complexd32, decimal32}
@MmuxDefineComplexArgBuiltin{complexd64, decimal64}
@MmuxDefineComplexArgBuiltin{complexd128, decimal128}

@c page
@node complex conj
@section Computing the complex conjugate value


@macro MmuxDefineComplexConjBuiltin{CPLXSTEM,REALSTEM}
@deftypefun mmux_\CPLXSTEM\_t mmux_\CPLXSTEM\_conj (mmux_\CPLXSTEM\_t @var{OP})
Compute and return complex conjugate value of the complex number @var{OP}.
@end deftypefun

@end macro

@MmuxDefineComplexConjBuiltin{complexf, float}
@MmuxDefineComplexConjBuiltin{complexd, double}
@MmuxDefineComplexConjBuiltin{complexld, ldouble}

@MmuxDefineComplexConjBuiltin{complexf32, float32}
@MmuxDefineComplexConjBuiltin{complexf64, float64}
@MmuxDefineComplexConjBuiltin{complexf128, float128}

@MmuxDefineComplexConjBuiltin{complexf32x, float32x}
@MmuxDefineComplexConjBuiltin{complexf64x, float64x}
@MmuxDefineComplexConjBuiltin{complexf128x, float128x}

@MmuxDefineComplexConjBuiltin{complexd32, decimal32}
@MmuxDefineComplexConjBuiltin{complexd64, decimal64}
@MmuxDefineComplexConjBuiltin{complexd128, decimal128}

@c page
@node predicates
@chapter Type predicates


@menu
* predicates zero::           Zero number predicates.
* predicates positive::       Positive number predicates.
* predicates negative::       Negative number predicates.
* predicates non-positive::   Non-positive number predicates.
* predicates non-negative::   Non-negative number predicates.
* predicates nan::            Not-a-number predicates.
* predicates infinite::       Infinite number predicates.
@end menu

@c page
@node predicates zero
@section Zero number predicates


@macro MmuxDefineTypePredicateZeroBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_zero @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
zero number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateZeroBuiltin{pointer}

@MmuxDefineTypePredicateZeroBuiltin{schar}
@MmuxDefineTypePredicateZeroBuiltin{uchar}
@MmuxDefineTypePredicateZeroBuiltin{sshort}
@MmuxDefineTypePredicateZeroBuiltin{ushort}
@MmuxDefineTypePredicateZeroBuiltin{sint}
@MmuxDefineTypePredicateZeroBuiltin{uint}
@MmuxDefineTypePredicateZeroBuiltin{slong}
@MmuxDefineTypePredicateZeroBuiltin{ulong}
@MmuxDefineTypePredicateZeroBuiltin{sllong}
@MmuxDefineTypePredicateZeroBuiltin{ullong}
@MmuxDefineTypePredicateZeroBuiltin{float}
@MmuxDefineTypePredicateZeroBuiltin{double}
@MmuxDefineTypePredicateZeroBuiltin{ldouble}

@MmuxDefineTypePredicateZeroBuiltin{float32}
@MmuxDefineTypePredicateZeroBuiltin{float64}
@MmuxDefineTypePredicateZeroBuiltin{float128}

@MmuxDefineTypePredicateZeroBuiltin{float32x}
@MmuxDefineTypePredicateZeroBuiltin{float64x}
@MmuxDefineTypePredicateZeroBuiltin{float128x}

@MmuxDefineTypePredicateZeroBuiltin{decimal32}
@MmuxDefineTypePredicateZeroBuiltin{decimal64}
@MmuxDefineTypePredicateZeroBuiltin{decimal128}

@MmuxDefineTypePredicateZeroBuiltin{complexf}
@MmuxDefineTypePredicateZeroBuiltin{complexd}
@MmuxDefineTypePredicateZeroBuiltin{complexld}

@MmuxDefineTypePredicateZeroBuiltin{complexf32}
@MmuxDefineTypePredicateZeroBuiltin{complexf64}
@MmuxDefineTypePredicateZeroBuiltin{complexf128}

@MmuxDefineTypePredicateZeroBuiltin{complexf32x}
@MmuxDefineTypePredicateZeroBuiltin{complexf64x}
@MmuxDefineTypePredicateZeroBuiltin{complexf128x}

@MmuxDefineTypePredicateZeroBuiltin{complexd32}
@MmuxDefineTypePredicateZeroBuiltin{complexd64}
@MmuxDefineTypePredicateZeroBuiltin{complexd128}

@MmuxDefineTypePredicateZeroBuiltin{sint8}
@MmuxDefineTypePredicateZeroBuiltin{uint8}
@MmuxDefineTypePredicateZeroBuiltin{sint16}
@MmuxDefineTypePredicateZeroBuiltin{uint16}
@MmuxDefineTypePredicateZeroBuiltin{sint32}
@MmuxDefineTypePredicateZeroBuiltin{uint32}
@MmuxDefineTypePredicateZeroBuiltin{sint64}
@MmuxDefineTypePredicateZeroBuiltin{uint64}

@MmuxDefineTypePredicateZeroBuiltin{ssize}
@MmuxDefineTypePredicateZeroBuiltin{usize}
@MmuxDefineTypePredicateZeroBuiltin{sintmax}
@MmuxDefineTypePredicateZeroBuiltin{uintmax}
@MmuxDefineTypePredicateZeroBuiltin{sintptr}
@MmuxDefineTypePredicateZeroBuiltin{uintptr}
@MmuxDefineTypePredicateZeroBuiltin{mode}
@MmuxDefineTypePredicateZeroBuiltin{off}
@MmuxDefineTypePredicateZeroBuiltin{pid}
@MmuxDefineTypePredicateZeroBuiltin{uid}
@MmuxDefineTypePredicateZeroBuiltin{gid}
@MmuxDefineTypePredicateZeroBuiltin{wchar}
@MmuxDefineTypePredicateZeroBuiltin{wint}

@c page
@node predicates positive
@section Positive number predicates


@macro MmuxDefineTypePredicatePositiveBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_positive @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
positive number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicatePositiveBuiltin{pointer}

@MmuxDefineTypePredicatePositiveBuiltin{schar}
@MmuxDefineTypePredicatePositiveBuiltin{uchar}
@MmuxDefineTypePredicatePositiveBuiltin{sshort}
@MmuxDefineTypePredicatePositiveBuiltin{ushort}
@MmuxDefineTypePredicatePositiveBuiltin{sint}
@MmuxDefineTypePredicatePositiveBuiltin{uint}
@MmuxDefineTypePredicatePositiveBuiltin{slong}
@MmuxDefineTypePredicatePositiveBuiltin{ulong}
@MmuxDefineTypePredicatePositiveBuiltin{sllong}
@MmuxDefineTypePredicatePositiveBuiltin{ullong}

@MmuxDefineTypePredicatePositiveBuiltin{float}
@MmuxDefineTypePredicatePositiveBuiltin{double}
@MmuxDefineTypePredicatePositiveBuiltin{ldouble}

@MmuxDefineTypePredicatePositiveBuiltin{float32}
@MmuxDefineTypePredicatePositiveBuiltin{float64}
@MmuxDefineTypePredicatePositiveBuiltin{float128}

@MmuxDefineTypePredicatePositiveBuiltin{float32x}
@MmuxDefineTypePredicatePositiveBuiltin{float64x}
@MmuxDefineTypePredicatePositiveBuiltin{float128x}

@MmuxDefineTypePredicatePositiveBuiltin{decimal32}
@MmuxDefineTypePredicatePositiveBuiltin{decimal64}
@MmuxDefineTypePredicatePositiveBuiltin{decimal128}

@MmuxDefineTypePredicatePositiveBuiltin{sint8}
@MmuxDefineTypePredicatePositiveBuiltin{uint8}
@MmuxDefineTypePredicatePositiveBuiltin{sint16}
@MmuxDefineTypePredicatePositiveBuiltin{uint16}
@MmuxDefineTypePredicatePositiveBuiltin{sint32}
@MmuxDefineTypePredicatePositiveBuiltin{uint32}
@MmuxDefineTypePredicatePositiveBuiltin{sint64}
@MmuxDefineTypePredicatePositiveBuiltin{uint64}

@MmuxDefineTypePredicatePositiveBuiltin{ssize}
@MmuxDefineTypePredicatePositiveBuiltin{usize}
@MmuxDefineTypePredicatePositiveBuiltin{sintmax}
@MmuxDefineTypePredicatePositiveBuiltin{uintmax}
@MmuxDefineTypePredicatePositiveBuiltin{sintptr}
@MmuxDefineTypePredicatePositiveBuiltin{uintptr}
@MmuxDefineTypePredicatePositiveBuiltin{mode}
@MmuxDefineTypePredicatePositiveBuiltin{off}
@MmuxDefineTypePredicatePositiveBuiltin{pid}
@MmuxDefineTypePredicatePositiveBuiltin{uid}
@MmuxDefineTypePredicatePositiveBuiltin{gid}
@MmuxDefineTypePredicatePositiveBuiltin{wchar}
@MmuxDefineTypePredicatePositiveBuiltin{wint}

@c page
@node predicates negative
@section Negative number predicates


@macro MmuxDefineTypePredicateNegativeBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_negative @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
negative number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateNegativeBuiltin{pointer}

@MmuxDefineTypePredicateNegativeBuiltin{schar}
@MmuxDefineTypePredicateNegativeBuiltin{uchar}
@MmuxDefineTypePredicateNegativeBuiltin{sshort}
@MmuxDefineTypePredicateNegativeBuiltin{ushort}
@MmuxDefineTypePredicateNegativeBuiltin{sint}
@MmuxDefineTypePredicateNegativeBuiltin{uint}
@MmuxDefineTypePredicateNegativeBuiltin{slong}
@MmuxDefineTypePredicateNegativeBuiltin{ulong}
@MmuxDefineTypePredicateNegativeBuiltin{sllong}
@MmuxDefineTypePredicateNegativeBuiltin{ullong}

@MmuxDefineTypePredicateNegativeBuiltin{float}
@MmuxDefineTypePredicateNegativeBuiltin{double}
@MmuxDefineTypePredicateNegativeBuiltin{ldouble}

@MmuxDefineTypePredicateNegativeBuiltin{float32}
@MmuxDefineTypePredicateNegativeBuiltin{float64}
@MmuxDefineTypePredicateNegativeBuiltin{float128}

@MmuxDefineTypePredicateNegativeBuiltin{float32x}
@MmuxDefineTypePredicateNegativeBuiltin{float64x}
@MmuxDefineTypePredicateNegativeBuiltin{float128x}

@MmuxDefineTypePredicateNegativeBuiltin{float32}
@MmuxDefineTypePredicateNegativeBuiltin{float64}
@MmuxDefineTypePredicateNegativeBuiltin{float128}

@MmuxDefineTypePredicateNegativeBuiltin{float32x}
@MmuxDefineTypePredicateNegativeBuiltin{float64x}
@MmuxDefineTypePredicateNegativeBuiltin{float128x}

@MmuxDefineTypePredicateNegativeBuiltin{decimal32}
@MmuxDefineTypePredicateNegativeBuiltin{decimal64}
@MmuxDefineTypePredicateNegativeBuiltin{decimal128}

@MmuxDefineTypePredicateNegativeBuiltin{sint8}
@MmuxDefineTypePredicateNegativeBuiltin{uint8}
@MmuxDefineTypePredicateNegativeBuiltin{sint16}
@MmuxDefineTypePredicateNegativeBuiltin{uint16}
@MmuxDefineTypePredicateNegativeBuiltin{sint32}
@MmuxDefineTypePredicateNegativeBuiltin{uint32}
@MmuxDefineTypePredicateNegativeBuiltin{sint64}
@MmuxDefineTypePredicateNegativeBuiltin{uint64}

@MmuxDefineTypePredicateNegativeBuiltin{ssize}
@MmuxDefineTypePredicateNegativeBuiltin{usize}
@MmuxDefineTypePredicateNegativeBuiltin{sintmax}
@MmuxDefineTypePredicateNegativeBuiltin{uintmax}
@MmuxDefineTypePredicateNegativeBuiltin{sintptr}
@MmuxDefineTypePredicateNegativeBuiltin{uintptr}
@MmuxDefineTypePredicateNegativeBuiltin{mode}
@MmuxDefineTypePredicateNegativeBuiltin{off}
@MmuxDefineTypePredicateNegativeBuiltin{pid}
@MmuxDefineTypePredicateNegativeBuiltin{uid}
@MmuxDefineTypePredicateNegativeBuiltin{gid}
@MmuxDefineTypePredicateNegativeBuiltin{wchar}
@MmuxDefineTypePredicateNegativeBuiltin{wint}

@c page
@node predicates non-positive
@section Non--positive number predicates


@macro MmuxDefineTypePredicateNonPositiveBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_non_positive @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
non--positive number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateNonPositiveBuiltin{pointer}

@MmuxDefineTypePredicateNonPositiveBuiltin{schar}
@MmuxDefineTypePredicateNonPositiveBuiltin{uchar}
@MmuxDefineTypePredicateNonPositiveBuiltin{sshort}
@MmuxDefineTypePredicateNonPositiveBuiltin{ushort}
@MmuxDefineTypePredicateNonPositiveBuiltin{sint}
@MmuxDefineTypePredicateNonPositiveBuiltin{uint}
@MmuxDefineTypePredicateNonPositiveBuiltin{slong}
@MmuxDefineTypePredicateNonPositiveBuiltin{ulong}
@MmuxDefineTypePredicateNonPositiveBuiltin{sllong}
@MmuxDefineTypePredicateNonPositiveBuiltin{ullong}
@MmuxDefineTypePredicateNonPositiveBuiltin{float}
@MmuxDefineTypePredicateNonPositiveBuiltin{double}
@MmuxDefineTypePredicateNonPositiveBuiltin{ldouble}

@MmuxDefineTypePredicateNonPositiveBuiltin{float32}
@MmuxDefineTypePredicateNonPositiveBuiltin{float64}
@MmuxDefineTypePredicateNonPositiveBuiltin{float128}

@MmuxDefineTypePredicateNonPositiveBuiltin{float32x}
@MmuxDefineTypePredicateNonPositiveBuiltin{float64x}
@MmuxDefineTypePredicateNonPositiveBuiltin{float128x}

@MmuxDefineTypePredicateNonPositiveBuiltin{decimal32}
@MmuxDefineTypePredicateNonPositiveBuiltin{decimal64}
@MmuxDefineTypePredicateNonPositiveBuiltin{decimal128}

@MmuxDefineTypePredicateNonPositiveBuiltin{sint8}
@MmuxDefineTypePredicateNonPositiveBuiltin{uint8}
@MmuxDefineTypePredicateNonPositiveBuiltin{sint16}
@MmuxDefineTypePredicateNonPositiveBuiltin{uint16}
@MmuxDefineTypePredicateNonPositiveBuiltin{sint32}
@MmuxDefineTypePredicateNonPositiveBuiltin{uint32}
@MmuxDefineTypePredicateNonPositiveBuiltin{sint64}
@MmuxDefineTypePredicateNonPositiveBuiltin{uint64}

@MmuxDefineTypePredicateNonPositiveBuiltin{ssize}
@MmuxDefineTypePredicateNonPositiveBuiltin{usize}
@MmuxDefineTypePredicateNonPositiveBuiltin{sintmax}
@MmuxDefineTypePredicateNonPositiveBuiltin{uintmax}
@MmuxDefineTypePredicateNonPositiveBuiltin{sintptr}
@MmuxDefineTypePredicateNonPositiveBuiltin{uintptr}
@MmuxDefineTypePredicateNonPositiveBuiltin{mode}
@MmuxDefineTypePredicateNonPositiveBuiltin{off}
@MmuxDefineTypePredicateNonPositiveBuiltin{pid}
@MmuxDefineTypePredicateNonPositiveBuiltin{uid}
@MmuxDefineTypePredicateNonPositiveBuiltin{gid}
@MmuxDefineTypePredicateNonPositiveBuiltin{wchar}
@MmuxDefineTypePredicateNonPositiveBuiltin{wint}

@c page
@node predicates non-negative
@section Non--negative number predicates


@macro MmuxDefineTypePredicateNonNegativeBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_non_negative @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
non--negative number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateNonNegativeBuiltin{pointer}

@MmuxDefineTypePredicateNonNegativeBuiltin{schar}
@MmuxDefineTypePredicateNonNegativeBuiltin{uchar}
@MmuxDefineTypePredicateNonNegativeBuiltin{sshort}
@MmuxDefineTypePredicateNonNegativeBuiltin{ushort}
@MmuxDefineTypePredicateNonNegativeBuiltin{sint}
@MmuxDefineTypePredicateNonNegativeBuiltin{uint}
@MmuxDefineTypePredicateNonNegativeBuiltin{slong}
@MmuxDefineTypePredicateNonNegativeBuiltin{ulong}
@MmuxDefineTypePredicateNonNegativeBuiltin{sllong}
@MmuxDefineTypePredicateNonNegativeBuiltin{ullong}
@MmuxDefineTypePredicateNonNegativeBuiltin{float}
@MmuxDefineTypePredicateNonNegativeBuiltin{double}
@MmuxDefineTypePredicateNonNegativeBuiltin{ldouble}

@MmuxDefineTypePredicateNonNegativeBuiltin{float32}
@MmuxDefineTypePredicateNonNegativeBuiltin{float64}
@MmuxDefineTypePredicateNonNegativeBuiltin{float128}

@MmuxDefineTypePredicateNonNegativeBuiltin{float32x}
@MmuxDefineTypePredicateNonNegativeBuiltin{float64x}
@MmuxDefineTypePredicateNonNegativeBuiltin{float128x}

@MmuxDefineTypePredicateNonNegativeBuiltin{decimal32}
@MmuxDefineTypePredicateNonNegativeBuiltin{decimal64}
@MmuxDefineTypePredicateNonNegativeBuiltin{decimal128}

@MmuxDefineTypePredicateNonNegativeBuiltin{sint8}
@MmuxDefineTypePredicateNonNegativeBuiltin{uint8}
@MmuxDefineTypePredicateNonNegativeBuiltin{sint16}
@MmuxDefineTypePredicateNonNegativeBuiltin{uint16}
@MmuxDefineTypePredicateNonNegativeBuiltin{sint32}
@MmuxDefineTypePredicateNonNegativeBuiltin{uint32}
@MmuxDefineTypePredicateNonNegativeBuiltin{sint64}
@MmuxDefineTypePredicateNonNegativeBuiltin{uint64}

@MmuxDefineTypePredicateNonNegativeBuiltin{ssize}
@MmuxDefineTypePredicateNonNegativeBuiltin{usize}
@MmuxDefineTypePredicateNonNegativeBuiltin{sintmax}
@MmuxDefineTypePredicateNonNegativeBuiltin{uintmax}
@MmuxDefineTypePredicateNonNegativeBuiltin{sintptr}
@MmuxDefineTypePredicateNonNegativeBuiltin{uintptr}
@MmuxDefineTypePredicateNonNegativeBuiltin{mode}
@MmuxDefineTypePredicateNonNegativeBuiltin{off}
@MmuxDefineTypePredicateNonNegativeBuiltin{pid}
@MmuxDefineTypePredicateNonNegativeBuiltin{uid}
@MmuxDefineTypePredicateNonNegativeBuiltin{gid}
@MmuxDefineTypePredicateNonNegativeBuiltin{wchar}
@MmuxDefineTypePredicateNonNegativeBuiltin{wint}

@c page
@node predicates nan
@section Not--a--number predicates


@macro MmuxDefineTypePredicateNanBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_nan @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents a
not--a--number value; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateNanBuiltin{pointer}

@MmuxDefineTypePredicateNanBuiltin{schar}
@MmuxDefineTypePredicateNanBuiltin{uchar}
@MmuxDefineTypePredicateNanBuiltin{sshort}
@MmuxDefineTypePredicateNanBuiltin{ushort}
@MmuxDefineTypePredicateNanBuiltin{sint}
@MmuxDefineTypePredicateNanBuiltin{uint}
@MmuxDefineTypePredicateNanBuiltin{slong}
@MmuxDefineTypePredicateNanBuiltin{ulong}
@MmuxDefineTypePredicateNanBuiltin{sllong}
@MmuxDefineTypePredicateNanBuiltin{ullong}
@MmuxDefineTypePredicateNanBuiltin{float}
@MmuxDefineTypePredicateNanBuiltin{double}
@MmuxDefineTypePredicateNanBuiltin{ldouble}

@MmuxDefineTypePredicateNanBuiltin{float32}
@MmuxDefineTypePredicateNanBuiltin{float64}
@MmuxDefineTypePredicateNanBuiltin{float128}

@MmuxDefineTypePredicateNanBuiltin{float32x}
@MmuxDefineTypePredicateNanBuiltin{float64x}
@MmuxDefineTypePredicateNanBuiltin{float128x}

@MmuxDefineTypePredicateNanBuiltin{decimal32}
@MmuxDefineTypePredicateNanBuiltin{decimal64}
@MmuxDefineTypePredicateNanBuiltin{decimal128}

@MmuxDefineTypePredicateNanBuiltin{complexf}
@MmuxDefineTypePredicateNanBuiltin{complexd}
@MmuxDefineTypePredicateNanBuiltin{complexld}

@MmuxDefineTypePredicateNanBuiltin{complexf32}
@MmuxDefineTypePredicateNanBuiltin{complexf64}
@MmuxDefineTypePredicateNanBuiltin{complexf128}

@MmuxDefineTypePredicateNanBuiltin{complexf32x}
@MmuxDefineTypePredicateNanBuiltin{complexf64x}
@MmuxDefineTypePredicateNanBuiltin{complexf128x}

@MmuxDefineTypePredicateNanBuiltin{complexd32}
@MmuxDefineTypePredicateNanBuiltin{complexd64}
@MmuxDefineTypePredicateNanBuiltin{complexd128}

@MmuxDefineTypePredicateNanBuiltin{sint8}
@MmuxDefineTypePredicateNanBuiltin{uint8}
@MmuxDefineTypePredicateNanBuiltin{sint16}
@MmuxDefineTypePredicateNanBuiltin{uint16}
@MmuxDefineTypePredicateNanBuiltin{sint32}
@MmuxDefineTypePredicateNanBuiltin{uint32}
@MmuxDefineTypePredicateNanBuiltin{sint64}
@MmuxDefineTypePredicateNanBuiltin{uint64}

@MmuxDefineTypePredicateNanBuiltin{ssize}
@MmuxDefineTypePredicateNanBuiltin{usize}
@MmuxDefineTypePredicateNanBuiltin{sintmax}
@MmuxDefineTypePredicateNanBuiltin{uintmax}
@MmuxDefineTypePredicateNanBuiltin{sintptr}
@MmuxDefineTypePredicateNanBuiltin{uintptr}
@MmuxDefineTypePredicateNanBuiltin{mode}
@MmuxDefineTypePredicateNanBuiltin{off}
@MmuxDefineTypePredicateNanBuiltin{pid}
@MmuxDefineTypePredicateNanBuiltin{uid}
@MmuxDefineTypePredicateNanBuiltin{gid}
@MmuxDefineTypePredicateNanBuiltin{wchar}
@MmuxDefineTypePredicateNanBuiltin{wint}

@c page
@node predicates infinite
@section Infinite number predicates


@macro MmuxDefineTypePredicateInfiniteBuiltin{STEM}
@deffn Builtin mmux_\STEM\_is_infinite @var{OP}
Return true if @var{OP} is a valid string representation for the C language type and it represents
an infinite number; otherwise return false.
@end deffn

@end macro

@MmuxDefineTypePredicateInfiniteBuiltin{pointer}

@MmuxDefineTypePredicateInfiniteBuiltin{schar}
@MmuxDefineTypePredicateInfiniteBuiltin{uchar}
@MmuxDefineTypePredicateInfiniteBuiltin{sshort}
@MmuxDefineTypePredicateInfiniteBuiltin{ushort}
@MmuxDefineTypePredicateInfiniteBuiltin{sint}
@MmuxDefineTypePredicateInfiniteBuiltin{uint}
@MmuxDefineTypePredicateInfiniteBuiltin{slong}
@MmuxDefineTypePredicateInfiniteBuiltin{ulong}
@MmuxDefineTypePredicateInfiniteBuiltin{sllong}
@MmuxDefineTypePredicateInfiniteBuiltin{ullong}
@MmuxDefineTypePredicateInfiniteBuiltin{float}
@MmuxDefineTypePredicateInfiniteBuiltin{double}
@MmuxDefineTypePredicateInfiniteBuiltin{ldouble}

@MmuxDefineTypePredicateInfiniteBuiltin{float32}
@MmuxDefineTypePredicateInfiniteBuiltin{float64}
@MmuxDefineTypePredicateInfiniteBuiltin{float128}

@MmuxDefineTypePredicateInfiniteBuiltin{float32x}
@MmuxDefineTypePredicateInfiniteBuiltin{float64x}
@MmuxDefineTypePredicateInfiniteBuiltin{float128x}

@MmuxDefineTypePredicateInfiniteBuiltin{decimal32}
@MmuxDefineTypePredicateInfiniteBuiltin{decimal64}
@MmuxDefineTypePredicateInfiniteBuiltin{decimal128}

@MmuxDefineTypePredicateInfiniteBuiltin{complexf}
@MmuxDefineTypePredicateInfiniteBuiltin{complexd}
@MmuxDefineTypePredicateInfiniteBuiltin{complexld}

@MmuxDefineTypePredicateInfiniteBuiltin{complexf32}
@MmuxDefineTypePredicateInfiniteBuiltin{complexf64}
@MmuxDefineTypePredicateInfiniteBuiltin{complexf128}

@MmuxDefineTypePredicateInfiniteBuiltin{complexf32x}
@MmuxDefineTypePredicateInfiniteBuiltin{complexf64x}
@MmuxDefineTypePredicateInfiniteBuiltin{complexf128x}

@MmuxDefineTypePredicateInfiniteBuiltin{complexd32}
@MmuxDefineTypePredicateInfiniteBuiltin{complexd64}
@MmuxDefineTypePredicateInfiniteBuiltin{complexd128}

@MmuxDefineTypePredicateInfiniteBuiltin{sint8}
@MmuxDefineTypePredicateInfiniteBuiltin{uint8}
@MmuxDefineTypePredicateInfiniteBuiltin{sint16}
@MmuxDefineTypePredicateInfiniteBuiltin{uint16}
@MmuxDefineTypePredicateInfiniteBuiltin{sint32}
@MmuxDefineTypePredicateInfiniteBuiltin{uint32}
@MmuxDefineTypePredicateInfiniteBuiltin{sint64}
@MmuxDefineTypePredicateInfiniteBuiltin{uint64}

@MmuxDefineTypePredicateInfiniteBuiltin{ssize}
@MmuxDefineTypePredicateInfiniteBuiltin{usize}
@MmuxDefineTypePredicateInfiniteBuiltin{sintmax}
@MmuxDefineTypePredicateInfiniteBuiltin{uintmax}
@MmuxDefineTypePredicateInfiniteBuiltin{sintptr}
@MmuxDefineTypePredicateInfiniteBuiltin{uintptr}
@MmuxDefineTypePredicateInfiniteBuiltin{mode}
@MmuxDefineTypePredicateInfiniteBuiltin{off}
@MmuxDefineTypePredicateInfiniteBuiltin{pid}
@MmuxDefineTypePredicateInfiniteBuiltin{uid}
@MmuxDefineTypePredicateInfiniteBuiltin{gid}
@MmuxDefineTypePredicateInfiniteBuiltin{wchar}
@MmuxDefineTypePredicateInfiniteBuiltin{wint}

@c page
@node comparison
@chapter Comparison builtins


@menu
* comparison exact::          Exact comparison builtins.
* comparison approximate::    Approximate comparison builtins.
@end menu

@c page
@node comparison exact
@section Exact comparison builtins


@gnu{} Bash already implements comparison operations for integer values, and such implementation
might be preferable to the builtins implemented by @value{PACKAGE}.  Anyway, for completeness, the
comparison operations are implemented for every supported data type.

@itemize
@item
The @samp{equal} builtins return true if all the operands (of which only @varo{OP} is mandatory) are
equal:

@example
@varo{OP} == @var{OP} == @dots{}
@end example

@item
The @samp{greater} builtins return true if for all the operands (of which only @varo{OP} is
mandatory):

@example
@varo{OP} > @var{OP} > @dots{}
@end example

@item
The @samp{lesser} builtins return true if for all the operands (of which only @varo{OP} is
mandatory):

@example
@varo{OP} < @var{OP} < @dots{}
@end example

@item
The @samp{greater_equal} builtins return true if for all the operands (of which only @varo{OP} is
mandatory):

@example
@varo{OP} >= @var{OP} >= @dots{}
@end example

@item
The @samp{lesser_equal} builtins return true if for all the operands (of which only @varo{OP} is
mandatory):

@example
@varo{OP} <= @var{OP} <= @dots{}
@end example
@end itemize


@macro MmuxDefineTypeComparisonExactBuiltin{STEM}
@deffn Builtin mmux_\STEM\_equal @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_\STEM\_greater @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_\STEM\_lesser @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_\STEM\_greater_equal @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_\STEM\_lesser_equal @varo{OP} @var{OP} @dots{}
Perform the comparison operations between values of type @objtype{\STEM\}.
@end deffn

@end macro

@c ------------------------------------------------------------------------

@macro MmuxDefineTypeComparisonExactComplexBuiltin{STEM}
@deffn Builtin mmux_\STEM\_equal @varo{OP} @var{OP} @dots{}
Perform the comparison operations between values of type @objtype{\STEM\}.
@end deffn

@end macro

@c ------------------------------------------------------------------------

@MmuxDefineTypeComparisonExactBuiltin{pointer}

@MmuxDefineTypeComparisonExactBuiltin{schar}
@MmuxDefineTypeComparisonExactBuiltin{uchar}
@MmuxDefineTypeComparisonExactBuiltin{sshort}
@MmuxDefineTypeComparisonExactBuiltin{ushort}
@MmuxDefineTypeComparisonExactBuiltin{sint}
@MmuxDefineTypeComparisonExactBuiltin{uint}
@MmuxDefineTypeComparisonExactBuiltin{slong}
@MmuxDefineTypeComparisonExactBuiltin{ulong}
@MmuxDefineTypeComparisonExactBuiltin{sllong}
@MmuxDefineTypeComparisonExactBuiltin{ullong}
@MmuxDefineTypeComparisonExactBuiltin{float}
@MmuxDefineTypeComparisonExactBuiltin{double}
@MmuxDefineTypeComparisonExactBuiltin{ldouble}

@MmuxDefineTypeComparisonExactBuiltin{float32}
@MmuxDefineTypeComparisonExactBuiltin{float64}
@MmuxDefineTypeComparisonExactBuiltin{float128}

@MmuxDefineTypeComparisonExactBuiltin{float32x}
@MmuxDefineTypeComparisonExactBuiltin{float64x}
@MmuxDefineTypeComparisonExactBuiltin{float128x}

@MmuxDefineTypeComparisonExactBuiltin{decimal32}
@MmuxDefineTypeComparisonExactBuiltin{decimal64}
@MmuxDefineTypeComparisonExactBuiltin{decimal128}

@MmuxDefineTypeComparisonExactComplexBuiltin{complexf}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexd}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexld}

@MmuxDefineTypeComparisonExactComplexBuiltin{complexf32}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexf64}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexf128}

@MmuxDefineTypeComparisonExactComplexBuiltin{complexf32x}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexf64x}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexf128x}

@MmuxDefineTypeComparisonExactComplexBuiltin{complexd32}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexd64}
@MmuxDefineTypeComparisonExactComplexBuiltin{complexd128}

@MmuxDefineTypeComparisonExactBuiltin{sint8}
@MmuxDefineTypeComparisonExactBuiltin{uint8}
@MmuxDefineTypeComparisonExactBuiltin{sint16}
@MmuxDefineTypeComparisonExactBuiltin{uint16}
@MmuxDefineTypeComparisonExactBuiltin{sint32}
@MmuxDefineTypeComparisonExactBuiltin{uint32}
@MmuxDefineTypeComparisonExactBuiltin{sint64}
@MmuxDefineTypeComparisonExactBuiltin{uint64}

@MmuxDefineTypeComparisonExactBuiltin{ssize}
@MmuxDefineTypeComparisonExactBuiltin{usize}
@MmuxDefineTypeComparisonExactBuiltin{sintmax}
@MmuxDefineTypeComparisonExactBuiltin{uintmax}
@MmuxDefineTypeComparisonExactBuiltin{sintptr}
@MmuxDefineTypeComparisonExactBuiltin{uintptr}
@MmuxDefineTypeComparisonExactBuiltin{mode}
@MmuxDefineTypeComparisonExactBuiltin{off}
@MmuxDefineTypeComparisonExactBuiltin{pid}
@MmuxDefineTypeComparisonExactBuiltin{uid}
@MmuxDefineTypeComparisonExactBuiltin{gid}
@MmuxDefineTypeComparisonExactBuiltin{wchar}
@MmuxDefineTypeComparisonExactBuiltin{wint}

@c page
@node comparison approximate
@section Approximate comparison builtins


@menu
* comparison approximate absmargin::  Absolute margin criterion.
* comparison approximate relepsilon:: Relative epsilon criterion.
@end menu

@c page
@node comparison approximate absmargin
@subsection Absolute margin criterion


To compare two floating--point numbers with the criterion of the absolute margin, we do:

@example
function doit () @{
    declare -r ABSOLUTE_MARGIN_FLOAT='0.1'

    mmux_float_equal_absmargin '1.0' '1.02'       @result{} 0
    mmux_float_equal_absmargin '1.0' '1.3'        @result{} 1
@}
@end example


@deffn Builtin mmux_float_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_double_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_ldouble_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexld_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float32_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float64_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float128_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float32x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float64x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float128x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal32_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal64_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal128_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf32_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf64_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf128_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf32x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf64x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf128x_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd32_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd64_equal_absmargin @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd128_equal_absmargin @varo{OP} @var{OP} @dots{}
Perform the comparison operations between operands of the named type; when the comparison predicate
is satisfied: return true; otherwise return false.

The argument @varo{OP} is the only mandatory one; when only this argument is present: the return
value is true.

When multiple operands are present: @varo{OP} is compared with all the other operands in turn.  When
comparing real numbers, the predicate is:

@example
abs(@varo{OP} - @var{OP}) <= abs(@var{MARGIN})
@end example

@noindent
when comparing complex numbers, the predicate is:

@example
abs(@varo{OP_RE} - @var{OP_RE}) <= abs(@var{MARGIN_RE}) &&
abs(@varo{OP_IM} - @var{OP_IM}) <= abs(@var{MARGIN_IM})
@end example

@noindent
where: @var{MARGIN} is the value read from the shell variable @env{ABSOLUTE_MARGIN_STEM};
@code{STEM} is the stem of the numerical type; @varo{OP_RE}, @var{OP_RE}, @var{MARGIN_RE} are the
real parts; @varo{OP_IM}, @var{OP_IM}, @var{MARGIN_IM} are the imaginary parts.
@end deffn


@defvar ABSOLUTE_MARGIN_FLOAT
@defvarx ABSOLUTE_MARGIN_DOUBLE
@defvarx ABSOLUTE_MARGIN_LDOUBLE
@defvarx ABSOLUTE_MARGIN_COMPLEXF
@defvarx ABSOLUTE_MARGIN_COMPLEXD
@defvarx ABSOLUTE_MARGIN_COMPLEXLD
@defvarx ABSOLUTE_MARGIN_FLOAT32
@defvarx ABSOLUTE_MARGIN_FLOAT64
@defvarx ABSOLUTE_MARGIN_FLOAT128
@defvarx ABSOLUTE_MARGIN_FLOAT32X
@defvarx ABSOLUTE_MARGIN_FLOAT64X
@defvarx ABSOLUTE_MARGIN_FLOAT128X
@defvarx ABSOLUTE_MARGIN_DECIMAL32
@defvarx ABSOLUTE_MARGIN_DECIMAL64
@defvarx ABSOLUTE_MARGIN_DECIMAL128
@defvarx ABSOLUTE_MARGIN_COMPLEXF32
@defvarx ABSOLUTE_MARGIN_COMPLEXF64
@defvarx ABSOLUTE_MARGIN_COMPLEXF128
@defvarx ABSOLUTE_MARGIN_COMPLEXF32X
@defvarx ABSOLUTE_MARGIN_COMPLEXF64X
@defvarx ABSOLUTE_MARGIN_COMPLEXF128X
@defvarx ABSOLUTE_MARGIN_COMPLEXD32
@defvarx ABSOLUTE_MARGIN_COMPLEXD64
@defvarx ABSOLUTE_MARGIN_COMPLEXD128
Shell variables used to select the margin for the equality with absolute margin builtins.  Each
variable is used to select a margin for the named numerical type.

For real numbers: the variable holds a real number being the margin.

For complex numbers: the variable holds a complex number; its real part is the margin for comparison
of real parts; its imaginary part is the margin for comparison of imaginary parts.

When a shell variable is not set: the default margin for real numbers is @samp{1e-6}; the default
margin for complex numbers is @samp{(1e-6)+i*(1e-6)}.
@end defvar

@c page
@node comparison approximate relepsilon
@subsection Relative epsilon criterion


To compare two floating--point numbers with the criterion of the relative epsilon, we do:

@example
function doit () @{
    declare -r RELATIVE_EPSILON_FLOAT='0.1'

    mmux_float_equal_relepsilon '1.0' '1.02'       @result{} 0
    mmux_float_equal_relepsilon '1.0' '1.3'        @result{} 1
@}
@end example


@deffn Builtin mmux_float_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_double_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_ldouble_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexld_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float32_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float64_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float128_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float32x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float64x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_float128x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal32_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal64_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_decimal128_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf32_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf64_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf128_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf32x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf64x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexf128x_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd32_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd64_equal_relepsilon @varo{OP} @var{OP} @dots{}
@deffnx Builtin mmux_complexd128_equal_relepsilon @varo{OP} @var{OP} @dots{}
Perform the comparison operations between operands of the named type; when the comparison predicate
is satisfied: return true; otherwise return false.

The argument @varo{OP} is the only mandatory one; when only this argument is present: the return
value is true.

When multiple operands are present: @varo{OP} is compared with all the other operands in turn.  When
comparing real numbers, the predicate is:

@example
abs(@varo{OP} - @var{OP}) <= (@var{EPSILON} * max(abs(@varo{OP}), abs(@var{OP})))
@end example

@noindent
when comparing complex numbers, the predicate is:

@example
abs(@varo{OP_RE} - @var{OP_RE}) <= (@var{EPSILON_RE} * max(abs(@varo{OP_RE}), abs(@var{OP_RE}))) &&
abs(@varo{OP_IM} - @var{OP_IM}) <= (@var{EPSILON_IM} * max(abs(@varo{OP_IM}), abs(@var{OP_IM})))
@end example

@noindent
where: @var{EPSILON} is the value read from the shell variable @env{RELATIVE_EPSILON_STEM};
@code{STEM} is the stem of the numerical type; @varo{OP_RE}, @var{OP_RE}, @var{EPSILON_RE} are the
real parts; @varo{OP_IM}, @var{OP_IM}, @var{EPSILON_IM} are the imaginary parts.
@end deffn


@defvar RELATIVE_EPSILON_FLOAT
@defvarx RELATIVE_EPSILON_DOUBLE
@defvarx RELATIVE_EPSILON_LDOUBLE
@defvarx RELATIVE_EPSILON_COMPLEXF
@defvarx RELATIVE_EPSILON_COMPLEXD
@defvarx RELATIVE_EPSILON_COMPLEXLD
@defvarx RELATIVE_EPSILON_FLOAT32
@defvarx RELATIVE_EPSILON_FLOAT64
@defvarx RELATIVE_EPSILON_FLOAT128
@defvarx RELATIVE_EPSILON_FLOAT32X
@defvarx RELATIVE_EPSILON_FLOAT64X
@defvarx RELATIVE_EPSILON_FLOAT128X
@defvarx RELATIVE_EPSILON_DECIMAL32
@defvarx RELATIVE_EPSILON_DECIMAL64
@defvarx RELATIVE_EPSILON_DECIMAL128
@defvarx RELATIVE_EPSILON_COMPLEXF32
@defvarx RELATIVE_EPSILON_COMPLEXF64
@defvarx RELATIVE_EPSILON_COMPLEXF128
@defvarx RELATIVE_EPSILON_COMPLEXF32X
@defvarx RELATIVE_EPSILON_COMPLEXF64X
@defvarx RELATIVE_EPSILON_COMPLEXF128X
@defvarx RELATIVE_EPSILON_COMPLEXD32
@defvarx RELATIVE_EPSILON_COMPLEXD64
@defvarx RELATIVE_EPSILON_COMPLEXD128
Shell variables used to select the epsilon for the equality with relative epsilon.  Each variable is
used to select an epsilon for the named numerical type.

For real numbers: the variable holds a real number being the epsilon.

For complex numbers: the variable holds a complex number; its real part is the epsilon for
comparison of real parts; its imaginary part is the epsilon for comparison of imaginary parts.

When a shell variable is not set: the default epsilon for real numbers is @samp{1e-6}; the default
epsilon for complex numbers is @samp{(1e-6)+i*(1e-6)}.
@end defvar

@c page
@node arithmetics
@chapter Arithmetics operation builtins


@gnu{} Bash already implements arithmetics operations for integer values, and such implementation
might be preferable to the builtins implemented by @value{PACKAGE}.  Anyway, for completeness, the
bitwise operations are implemented for every supported data type.

@menu
* arithmetics addition::        Addition builtins.
* arithmetics subtraction::     Subtraction builtins.
* arithmetics multiplication::  Multiplication builtins.
* arithmetics division::        Division builtins.
* arithmetics remainder::       Remainder builtins.
* arithmetics negation::        Negation builtins.
* arithmetics inversion::       Inversion builtins.
* arithmetics incrdecr::        Increment and decrement builtins.
@end menu

@c page
@node arithmetics addition
@section Addition builtins


@deffn Builtin mmux_pointer_add @var{PTRVAR} @var{PTR} @var{DELTA}
Perform the addition between @var{PTR} and @var{DELTA}, then store a string representation of the
result in the variable @var{PTRVAR}; when successful: return true, otherwise return false and set
the shell variable @code{ERRNO} to the string representation of an exact integer, itself
representing an @code{errno} error code.

The argument @var{PTR} must be the string representation of a pointer.

The argument @var{DELTA} must be the string representation of an exact number, in the range of the C
language type @objtype{ptrdiff_t}.
@end deffn


For the following builtins, the addition operation is as follows:

@example
@var{ROP} = @varo{OP} + @var{OP} + @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the addition between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.


@macro MmuxDefineTypeAdditionBuiltin{STEM}
@deffn Builtin mmux_\STEM\_add @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the addition between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeAdditionBuiltin{schar}
@MmuxDefineTypeAdditionBuiltin{uchar}
@MmuxDefineTypeAdditionBuiltin{sshort}
@MmuxDefineTypeAdditionBuiltin{ushort}
@MmuxDefineTypeAdditionBuiltin{sint}
@MmuxDefineTypeAdditionBuiltin{uint}
@MmuxDefineTypeAdditionBuiltin{slong}
@MmuxDefineTypeAdditionBuiltin{ulong}
@MmuxDefineTypeAdditionBuiltin{sllong}
@MmuxDefineTypeAdditionBuiltin{ullong}
@MmuxDefineTypeAdditionBuiltin{float}
@MmuxDefineTypeAdditionBuiltin{double}
@MmuxDefineTypeAdditionBuiltin{ldouble}

@MmuxDefineTypeAdditionBuiltin{float32}
@MmuxDefineTypeAdditionBuiltin{float64}
@MmuxDefineTypeAdditionBuiltin{float128}

@MmuxDefineTypeAdditionBuiltin{float32x}
@MmuxDefineTypeAdditionBuiltin{float64x}
@MmuxDefineTypeAdditionBuiltin{float128x}

@MmuxDefineTypeAdditionBuiltin{decimal32}
@MmuxDefineTypeAdditionBuiltin{decimal64}
@MmuxDefineTypeAdditionBuiltin{decimal128}

@MmuxDefineTypeAdditionBuiltin{complexf}
@MmuxDefineTypeAdditionBuiltin{complexd}
@MmuxDefineTypeAdditionBuiltin{complexld}

@MmuxDefineTypeAdditionBuiltin{complexf32}
@MmuxDefineTypeAdditionBuiltin{complexf64}
@MmuxDefineTypeAdditionBuiltin{complexf128}

@MmuxDefineTypeAdditionBuiltin{complexf32x}
@MmuxDefineTypeAdditionBuiltin{complexf64x}
@MmuxDefineTypeAdditionBuiltin{complexf128x}

@MmuxDefineTypeAdditionBuiltin{complexd32}
@MmuxDefineTypeAdditionBuiltin{complexd64}
@MmuxDefineTypeAdditionBuiltin{complexd128}

@MmuxDefineTypeAdditionBuiltin{sint8}
@MmuxDefineTypeAdditionBuiltin{uint8}
@MmuxDefineTypeAdditionBuiltin{sint16}
@MmuxDefineTypeAdditionBuiltin{uint16}
@MmuxDefineTypeAdditionBuiltin{sint32}
@MmuxDefineTypeAdditionBuiltin{uint32}
@MmuxDefineTypeAdditionBuiltin{sint64}
@MmuxDefineTypeAdditionBuiltin{uint64}

@MmuxDefineTypeAdditionBuiltin{ssize}
@MmuxDefineTypeAdditionBuiltin{usize}
@MmuxDefineTypeAdditionBuiltin{sintmax}
@MmuxDefineTypeAdditionBuiltin{uintmax}
@MmuxDefineTypeAdditionBuiltin{sintptr}
@MmuxDefineTypeAdditionBuiltin{uintptr}
@MmuxDefineTypeAdditionBuiltin{mode}
@MmuxDefineTypeAdditionBuiltin{off}
@MmuxDefineTypeAdditionBuiltin{pid}
@MmuxDefineTypeAdditionBuiltin{uid}
@MmuxDefineTypeAdditionBuiltin{gid}
@MmuxDefineTypeAdditionBuiltin{wchar}
@MmuxDefineTypeAdditionBuiltin{wint}

@c page
@node arithmetics subtraction
@section Subtraction builtins


For the following builtins, the subtraction operation is as follows:

@example
@var{ROP} = @varo{OP} - @var{OP} - @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the subtraction between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.


@macro MmuxDefineTypeSubtractionBuiltin{STEM}
@deffn Builtin mmux_\STEM\_sub @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the subtraction between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeSubtractionBuiltin{schar}
@MmuxDefineTypeSubtractionBuiltin{uchar}
@MmuxDefineTypeSubtractionBuiltin{sshort}
@MmuxDefineTypeSubtractionBuiltin{ushort}
@MmuxDefineTypeSubtractionBuiltin{sint}
@MmuxDefineTypeSubtractionBuiltin{uint}
@MmuxDefineTypeSubtractionBuiltin{slong}
@MmuxDefineTypeSubtractionBuiltin{ulong}
@MmuxDefineTypeSubtractionBuiltin{sllong}
@MmuxDefineTypeSubtractionBuiltin{ullong}
@MmuxDefineTypeSubtractionBuiltin{float}
@MmuxDefineTypeSubtractionBuiltin{double}
@MmuxDefineTypeSubtractionBuiltin{ldouble}

@MmuxDefineTypeSubtractionBuiltin{float32}
@MmuxDefineTypeSubtractionBuiltin{float64}
@MmuxDefineTypeSubtractionBuiltin{float128}

@MmuxDefineTypeSubtractionBuiltin{float32x}
@MmuxDefineTypeSubtractionBuiltin{float64x}
@MmuxDefineTypeSubtractionBuiltin{float128x}

@MmuxDefineTypeSubtractionBuiltin{decimal32}
@MmuxDefineTypeSubtractionBuiltin{decimal64}
@MmuxDefineTypeSubtractionBuiltin{decimal128}

@MmuxDefineTypeSubtractionBuiltin{complexf}
@MmuxDefineTypeSubtractionBuiltin{complexd}
@MmuxDefineTypeSubtractionBuiltin{complexld}

@MmuxDefineTypeSubtractionBuiltin{complexf32}
@MmuxDefineTypeSubtractionBuiltin{complexf64}
@MmuxDefineTypeSubtractionBuiltin{complexf128}

@MmuxDefineTypeSubtractionBuiltin{complexd32}
@MmuxDefineTypeSubtractionBuiltin{complexd64}
@MmuxDefineTypeSubtractionBuiltin{complexd128}

@MmuxDefineTypeSubtractionBuiltin{sint8}
@MmuxDefineTypeSubtractionBuiltin{uint8}
@MmuxDefineTypeSubtractionBuiltin{sint16}
@MmuxDefineTypeSubtractionBuiltin{uint16}
@MmuxDefineTypeSubtractionBuiltin{sint32}
@MmuxDefineTypeSubtractionBuiltin{uint32}
@MmuxDefineTypeSubtractionBuiltin{sint64}
@MmuxDefineTypeSubtractionBuiltin{uint64}

@MmuxDefineTypeSubtractionBuiltin{ssize}
@MmuxDefineTypeSubtractionBuiltin{usize}
@MmuxDefineTypeSubtractionBuiltin{sintmax}
@MmuxDefineTypeSubtractionBuiltin{uintmax}
@MmuxDefineTypeSubtractionBuiltin{sintptr}
@MmuxDefineTypeSubtractionBuiltin{uintptr}
@MmuxDefineTypeSubtractionBuiltin{mode}
@MmuxDefineTypeSubtractionBuiltin{off}
@MmuxDefineTypeSubtractionBuiltin{pid}
@MmuxDefineTypeSubtractionBuiltin{uid}
@MmuxDefineTypeSubtractionBuiltin{gid}
@MmuxDefineTypeSubtractionBuiltin{wchar}
@MmuxDefineTypeSubtractionBuiltin{wint}

@c page
@node arithmetics multiplication
@section Multiplication builtins


For the following builtins, the multiplication operation is as follows:

@example
@var{ROP} = @varo{OP} * types @var{OP} * types @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the multiplication between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.


@macro MmuxDefineTypeMultiplicationBuiltin{STEM}
@deffn Builtin mmux_\STEM\_mul @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the multiplication between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeMultiplicationBuiltin{schar}
@MmuxDefineTypeMultiplicationBuiltin{uchar}
@MmuxDefineTypeMultiplicationBuiltin{sshort}
@MmuxDefineTypeMultiplicationBuiltin{ushort}
@MmuxDefineTypeMultiplicationBuiltin{sint}
@MmuxDefineTypeMultiplicationBuiltin{uint}
@MmuxDefineTypeMultiplicationBuiltin{slong}
@MmuxDefineTypeMultiplicationBuiltin{ulong}
@MmuxDefineTypeMultiplicationBuiltin{sllong}
@MmuxDefineTypeMultiplicationBuiltin{ullong}
@MmuxDefineTypeMultiplicationBuiltin{float}
@MmuxDefineTypeMultiplicationBuiltin{double}
@MmuxDefineTypeMultiplicationBuiltin{ldouble}

@MmuxDefineTypeMultiplicationBuiltin{float32}
@MmuxDefineTypeMultiplicationBuiltin{float64}
@MmuxDefineTypeMultiplicationBuiltin{float128}

@MmuxDefineTypeMultiplicationBuiltin{float32x}
@MmuxDefineTypeMultiplicationBuiltin{float64x}
@MmuxDefineTypeMultiplicationBuiltin{float128x}

@MmuxDefineTypeMultiplicationBuiltin{decimal32}
@MmuxDefineTypeMultiplicationBuiltin{decimal64}
@MmuxDefineTypeMultiplicationBuiltin{decimal128}

@MmuxDefineTypeMultiplicationBuiltin{complexf}
@MmuxDefineTypeMultiplicationBuiltin{complexd}
@MmuxDefineTypeMultiplicationBuiltin{complexld}

@MmuxDefineTypeMultiplicationBuiltin{complexf32}
@MmuxDefineTypeMultiplicationBuiltin{complexf64}
@MmuxDefineTypeMultiplicationBuiltin{complexf128}

@MmuxDefineTypeMultiplicationBuiltin{complexd32}
@MmuxDefineTypeMultiplicationBuiltin{complexd64}
@MmuxDefineTypeMultiplicationBuiltin{complexd128}

@MmuxDefineTypeMultiplicationBuiltin{sint8}
@MmuxDefineTypeMultiplicationBuiltin{uint8}
@MmuxDefineTypeMultiplicationBuiltin{sint16}
@MmuxDefineTypeMultiplicationBuiltin{uint16}
@MmuxDefineTypeMultiplicationBuiltin{sint32}
@MmuxDefineTypeMultiplicationBuiltin{uint32}
@MmuxDefineTypeMultiplicationBuiltin{sint64}
@MmuxDefineTypeMultiplicationBuiltin{uint64}

@MmuxDefineTypeMultiplicationBuiltin{ssize}
@MmuxDefineTypeMultiplicationBuiltin{usize}
@MmuxDefineTypeMultiplicationBuiltin{sintmax}
@MmuxDefineTypeMultiplicationBuiltin{uintmax}
@MmuxDefineTypeMultiplicationBuiltin{sintptr}
@MmuxDefineTypeMultiplicationBuiltin{uintptr}
@MmuxDefineTypeMultiplicationBuiltin{mode}
@MmuxDefineTypeMultiplicationBuiltin{off}
@MmuxDefineTypeMultiplicationBuiltin{pid}
@MmuxDefineTypeMultiplicationBuiltin{uid}
@MmuxDefineTypeMultiplicationBuiltin{gid}
@MmuxDefineTypeMultiplicationBuiltin{wchar}
@MmuxDefineTypeMultiplicationBuiltin{wint}

@c page
@node arithmetics division
@section Division builtins


For the following builtins, the division operation is as follows:

@example
@var{ROP} = @varo{OP} * types @var{OP} * types @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the division between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.


@macro MmuxDefineTypeDivisionBuiltin{STEM}
@deffn Builtin mmux_\STEM\_div @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the division between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeDivisionBuiltin{schar}
@MmuxDefineTypeDivisionBuiltin{uchar}
@MmuxDefineTypeDivisionBuiltin{sshort}
@MmuxDefineTypeDivisionBuiltin{ushort}
@MmuxDefineTypeDivisionBuiltin{sint}
@MmuxDefineTypeDivisionBuiltin{uint}
@MmuxDefineTypeDivisionBuiltin{slong}
@MmuxDefineTypeDivisionBuiltin{ulong}
@MmuxDefineTypeDivisionBuiltin{sllong}
@MmuxDefineTypeDivisionBuiltin{ullong}
@MmuxDefineTypeDivisionBuiltin{float}
@MmuxDefineTypeDivisionBuiltin{double}
@MmuxDefineTypeDivisionBuiltin{ldouble}

@MmuxDefineTypeDivisionBuiltin{float32}
@MmuxDefineTypeDivisionBuiltin{float64}
@MmuxDefineTypeDivisionBuiltin{float128}

@MmuxDefineTypeDivisionBuiltin{float32x}
@MmuxDefineTypeDivisionBuiltin{float64x}
@MmuxDefineTypeDivisionBuiltin{float128x}

@MmuxDefineTypeDivisionBuiltin{decimal32}
@MmuxDefineTypeDivisionBuiltin{decimal64}
@MmuxDefineTypeDivisionBuiltin{decimal128}

@MmuxDefineTypeDivisionBuiltin{complexf}
@MmuxDefineTypeDivisionBuiltin{complexd}
@MmuxDefineTypeDivisionBuiltin{complexld}

@MmuxDefineTypeDivisionBuiltin{complexf32}
@MmuxDefineTypeDivisionBuiltin{complexf64}
@MmuxDefineTypeDivisionBuiltin{complexf128}

@MmuxDefineTypeDivisionBuiltin{complexd32}
@MmuxDefineTypeDivisionBuiltin{complexd64}
@MmuxDefineTypeDivisionBuiltin{complexd128}

@MmuxDefineTypeDivisionBuiltin{sint8}
@MmuxDefineTypeDivisionBuiltin{uint8}
@MmuxDefineTypeDivisionBuiltin{sint16}
@MmuxDefineTypeDivisionBuiltin{uint16}
@MmuxDefineTypeDivisionBuiltin{sint32}
@MmuxDefineTypeDivisionBuiltin{uint32}
@MmuxDefineTypeDivisionBuiltin{sint64}
@MmuxDefineTypeDivisionBuiltin{uint64}

@MmuxDefineTypeDivisionBuiltin{ssize}
@MmuxDefineTypeDivisionBuiltin{usize}
@MmuxDefineTypeDivisionBuiltin{sintmax}
@MmuxDefineTypeDivisionBuiltin{uintmax}
@MmuxDefineTypeDivisionBuiltin{sintptr}
@MmuxDefineTypeDivisionBuiltin{uintptr}
@MmuxDefineTypeDivisionBuiltin{mode}
@MmuxDefineTypeDivisionBuiltin{off}
@MmuxDefineTypeDivisionBuiltin{pid}
@MmuxDefineTypeDivisionBuiltin{uid}
@MmuxDefineTypeDivisionBuiltin{gid}
@MmuxDefineTypeDivisionBuiltin{wchar}
@MmuxDefineTypeDivisionBuiltin{wint}

@c page
@node arithmetics remainder
@section Remainder builtins


For the following builtins, the remainder operation is as follows:

@example
@var{ROP} = @vari{OP} % @varii{OP}
@end example

All the builtins perform the remainder between the operands @var{OP}, then store a string
representation of the result in the variable @var{ROPVAR}; when successful: return true, otherwise
return false and set the shell variable @code{ERRNO} to the string representation of an exact
integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.


@macro MmuxDefineTypeRemainderBuiltin{STEM}
@deffn Builtin mmux_\STEM\_mod @var{ROPVAR} @vari{OP} @varii{OP}
Perform the remainder between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeRemainderBuiltin{schar}
@MmuxDefineTypeRemainderBuiltin{uchar}
@MmuxDefineTypeRemainderBuiltin{sshort}
@MmuxDefineTypeRemainderBuiltin{ushort}
@MmuxDefineTypeRemainderBuiltin{sint}
@MmuxDefineTypeRemainderBuiltin{uint}
@MmuxDefineTypeRemainderBuiltin{slong}
@MmuxDefineTypeRemainderBuiltin{ulong}
@MmuxDefineTypeRemainderBuiltin{sllong}
@MmuxDefineTypeRemainderBuiltin{ullong}

@MmuxDefineTypeRemainderBuiltin{sint8}
@MmuxDefineTypeRemainderBuiltin{uint8}
@MmuxDefineTypeRemainderBuiltin{sint16}
@MmuxDefineTypeRemainderBuiltin{uint16}
@MmuxDefineTypeRemainderBuiltin{sint32}
@MmuxDefineTypeRemainderBuiltin{uint32}
@MmuxDefineTypeRemainderBuiltin{sint64}
@MmuxDefineTypeRemainderBuiltin{uint64}

@MmuxDefineTypeRemainderBuiltin{ssize}
@MmuxDefineTypeRemainderBuiltin{usize}
@MmuxDefineTypeRemainderBuiltin{sintmax}
@MmuxDefineTypeRemainderBuiltin{uintmax}
@MmuxDefineTypeRemainderBuiltin{sintptr}
@MmuxDefineTypeRemainderBuiltin{uintptr}
@MmuxDefineTypeRemainderBuiltin{mode}
@MmuxDefineTypeRemainderBuiltin{off}
@MmuxDefineTypeRemainderBuiltin{pid}
@MmuxDefineTypeRemainderBuiltin{uid}
@MmuxDefineTypeRemainderBuiltin{gid}
@MmuxDefineTypeRemainderBuiltin{wchar}
@MmuxDefineTypeRemainderBuiltin{wint}

@c page
@node arithmetics negation
@section Negation builtins


For the following builtins, the negation operation is as follows:

@example
@var{ROP} = - @var{OP}
@end example

All the builtins perform the negation of the operand @var{OP}, then store a string representation of
the result in the variable @var{ROPVAR}; when successful: return true, otherwise return false and
set the shell variable @code{ERRNO} to the string representation of an exact integer, itself
representing an @code{errno} error code.

The argument @var{OP} must be a string representation of a value of the specific builtin type.

@strong{NOTE} The builtins are implemented also for unsigned integers, for which the operation is
undefined; this will be fixed in the future, probably@dots{}


@macro MmuxDefineTypeNegationBuiltin{STEM}
@deffn Builtin mmux_\STEM\_neg @var{ROPVAR} @var{OP}
Perform the negation of a value of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeNegationBuiltin{schar}
@MmuxDefineTypeNegationBuiltin{uchar}
@MmuxDefineTypeNegationBuiltin{sshort}
@MmuxDefineTypeNegationBuiltin{ushort}
@MmuxDefineTypeNegationBuiltin{sint}
@MmuxDefineTypeNegationBuiltin{uint}
@MmuxDefineTypeNegationBuiltin{slong}
@MmuxDefineTypeNegationBuiltin{ulong}
@MmuxDefineTypeNegationBuiltin{sllong}
@MmuxDefineTypeNegationBuiltin{ullong}
@MmuxDefineTypeNegationBuiltin{float}
@MmuxDefineTypeNegationBuiltin{double}
@MmuxDefineTypeNegationBuiltin{ldouble}

@MmuxDefineTypeNegationBuiltin{float32}
@MmuxDefineTypeNegationBuiltin{float64}
@MmuxDefineTypeNegationBuiltin{float128}

@MmuxDefineTypeNegationBuiltin{float32x}
@MmuxDefineTypeNegationBuiltin{float64x}
@MmuxDefineTypeNegationBuiltin{float128x}

@MmuxDefineTypeNegationBuiltin{decimal32}
@MmuxDefineTypeNegationBuiltin{decimal64}
@MmuxDefineTypeNegationBuiltin{decimal128}

@MmuxDefineTypeNegationBuiltin{complexf}
@MmuxDefineTypeNegationBuiltin{complexd}
@MmuxDefineTypeNegationBuiltin{complexld}

@MmuxDefineTypeNegationBuiltin{complexf32}
@MmuxDefineTypeNegationBuiltin{complexf64}
@MmuxDefineTypeNegationBuiltin{complexf128}

@MmuxDefineTypeNegationBuiltin{complexd32}
@MmuxDefineTypeNegationBuiltin{complexd64}
@MmuxDefineTypeNegationBuiltin{complexd128}

@MmuxDefineTypeNegationBuiltin{sint8}
@MmuxDefineTypeNegationBuiltin{uint8}
@MmuxDefineTypeNegationBuiltin{sint16}
@MmuxDefineTypeNegationBuiltin{uint16}
@MmuxDefineTypeNegationBuiltin{sint32}
@MmuxDefineTypeNegationBuiltin{uint32}
@MmuxDefineTypeNegationBuiltin{sint64}
@MmuxDefineTypeNegationBuiltin{uint64}

@MmuxDefineTypeNegationBuiltin{ssize}
@MmuxDefineTypeNegationBuiltin{usize}
@MmuxDefineTypeNegationBuiltin{sintmax}
@MmuxDefineTypeNegationBuiltin{uintmax}
@MmuxDefineTypeNegationBuiltin{sintptr}
@MmuxDefineTypeNegationBuiltin{uintptr}
@MmuxDefineTypeNegationBuiltin{mode}
@MmuxDefineTypeNegationBuiltin{off}
@MmuxDefineTypeNegationBuiltin{pid}
@MmuxDefineTypeNegationBuiltin{uid}
@MmuxDefineTypeNegationBuiltin{gid}
@MmuxDefineTypeNegationBuiltin{wchar}
@MmuxDefineTypeNegationBuiltin{wint}

@c page
@node arithmetics inversion
@section Inversion builtins


For the following builtins, the inversion operation is as follows:

@example
@var{ROP} = 1 / @var{OP}
@end example

All the builtins perform the inversion of the operand @var{OP}, then store a string representation of
the result in the variable @var{ROPVAR}; when successful: return true, otherwise return false and
set the shell variable @code{ERRNO} to the string representation of an exact integer, itself
representing an @code{errno} error code.

The argument @var{OP} must be a string representation of a value of the specific builtin type.


@macro MmuxDefineTypeInversionBuiltin{STEM}
@deffn Builtin mmux_\STEM\_inv @var{ROPVAR} @var{OP}
Perform the inversion of a value of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeInversionBuiltin{schar}
@MmuxDefineTypeInversionBuiltin{uchar}
@MmuxDefineTypeInversionBuiltin{sshort}
@MmuxDefineTypeInversionBuiltin{ushort}
@MmuxDefineTypeInversionBuiltin{sint}
@MmuxDefineTypeInversionBuiltin{uint}
@MmuxDefineTypeInversionBuiltin{slong}
@MmuxDefineTypeInversionBuiltin{ulong}
@MmuxDefineTypeInversionBuiltin{sllong}
@MmuxDefineTypeInversionBuiltin{ullong}
@MmuxDefineTypeInversionBuiltin{float}
@MmuxDefineTypeInversionBuiltin{double}
@MmuxDefineTypeInversionBuiltin{ldouble}

@MmuxDefineTypeInversionBuiltin{float32}
@MmuxDefineTypeInversionBuiltin{float64}
@MmuxDefineTypeInversionBuiltin{float128}

@MmuxDefineTypeInversionBuiltin{float32x}
@MmuxDefineTypeInversionBuiltin{float64x}
@MmuxDefineTypeInversionBuiltin{float128x}

@MmuxDefineTypeInversionBuiltin{decimal32}
@MmuxDefineTypeInversionBuiltin{decimal64}
@MmuxDefineTypeInversionBuiltin{decimal128}

@MmuxDefineTypeInversionBuiltin{complexf}
@MmuxDefineTypeInversionBuiltin{complexd}
@MmuxDefineTypeInversionBuiltin{complexld}

@MmuxDefineTypeInversionBuiltin{complexf32}
@MmuxDefineTypeInversionBuiltin{complexf64}
@MmuxDefineTypeInversionBuiltin{complexf128}

@MmuxDefineTypeInversionBuiltin{complexd32}
@MmuxDefineTypeInversionBuiltin{complexd64}
@MmuxDefineTypeInversionBuiltin{complexd128}

@MmuxDefineTypeInversionBuiltin{sint8}
@MmuxDefineTypeInversionBuiltin{uint8}
@MmuxDefineTypeInversionBuiltin{sint16}
@MmuxDefineTypeInversionBuiltin{uint16}
@MmuxDefineTypeInversionBuiltin{sint32}
@MmuxDefineTypeInversionBuiltin{uint32}
@MmuxDefineTypeInversionBuiltin{sint64}
@MmuxDefineTypeInversionBuiltin{uint64}

@MmuxDefineTypeInversionBuiltin{ssize}
@MmuxDefineTypeInversionBuiltin{usize}
@MmuxDefineTypeInversionBuiltin{sintmax}
@MmuxDefineTypeInversionBuiltin{uintmax}
@MmuxDefineTypeInversionBuiltin{sintptr}
@MmuxDefineTypeInversionBuiltin{uintptr}
@MmuxDefineTypeInversionBuiltin{mode}
@MmuxDefineTypeInversionBuiltin{off}
@MmuxDefineTypeInversionBuiltin{pid}
@MmuxDefineTypeInversionBuiltin{uid}
@MmuxDefineTypeInversionBuiltin{gid}
@MmuxDefineTypeInversionBuiltin{wchar}
@MmuxDefineTypeInversionBuiltin{wint}

@c page
@node arithmetics incrdecr
@section Increment and decrement builtins


@macro MmuxDefineTypeIncrdecrBuiltin{STEM}
@deffn Builtin mmux_\STEM\_incr @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_decr @var{ROPVAR} @var{OP}
Increment or decrement @var{OP}, store the result in the shell variable @var{ROPVAR}.
@end deffn

@end macro

@MmuxDefineTypeIncrdecrBuiltin{schar}
@MmuxDefineTypeIncrdecrBuiltin{uchar}
@MmuxDefineTypeIncrdecrBuiltin{sshort}
@MmuxDefineTypeIncrdecrBuiltin{ushort}
@MmuxDefineTypeIncrdecrBuiltin{sint}
@MmuxDefineTypeIncrdecrBuiltin{uint}
@MmuxDefineTypeIncrdecrBuiltin{slong}
@MmuxDefineTypeIncrdecrBuiltin{ulong}
@MmuxDefineTypeIncrdecrBuiltin{sllong}
@MmuxDefineTypeIncrdecrBuiltin{ullong}

@MmuxDefineTypeIncrdecrBuiltin{sint8}
@MmuxDefineTypeIncrdecrBuiltin{uint8}
@MmuxDefineTypeIncrdecrBuiltin{sint16}
@MmuxDefineTypeIncrdecrBuiltin{uint16}
@MmuxDefineTypeIncrdecrBuiltin{sint32}
@MmuxDefineTypeIncrdecrBuiltin{uint32}
@MmuxDefineTypeIncrdecrBuiltin{sint64}
@MmuxDefineTypeIncrdecrBuiltin{uint64}

@MmuxDefineTypeIncrdecrBuiltin{ssize}
@MmuxDefineTypeIncrdecrBuiltin{usize}
@MmuxDefineTypeIncrdecrBuiltin{sintmax}
@MmuxDefineTypeIncrdecrBuiltin{uintmax}
@MmuxDefineTypeIncrdecrBuiltin{sintptr}
@MmuxDefineTypeIncrdecrBuiltin{uintptr}
@MmuxDefineTypeIncrdecrBuiltin{mode}
@MmuxDefineTypeIncrdecrBuiltin{off}
@MmuxDefineTypeIncrdecrBuiltin{pid}
@MmuxDefineTypeIncrdecrBuiltin{uid}
@MmuxDefineTypeIncrdecrBuiltin{gid}
@MmuxDefineTypeIncrdecrBuiltin{wchar}
@MmuxDefineTypeIncrdecrBuiltin{wint}

@c page
@node mathematics
@chapter Mathematics operation builtins


All the following builtins compute a value and store its string representation in @var{ROPVAR}.

@macro MmuxDefineMathRealBuiltins{STEM}
@deffn Builtin mmux_\STEM\_sin @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_cos @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_tan @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_asin @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_acos @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atan @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atan2 @var{ROPVAR} @vari{OP} @varii{OP}
@deffnx Builtin mmux_\STEM\_sinh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_cosh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_tanh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_asinh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_acosh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atanh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_exp @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_exp2 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_exp10 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log10 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log2 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_logb @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_pow @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_sqrt @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_cbrt @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_hypot @var{ROPVAR} @vari{OP} @vari{OP}
@deffnx Builtin mmux_\STEM\_expm1 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log1p @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_erf @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_erfc @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_lgamma @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_tgamma @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_j0 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_j1 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_jn @var{ROPVAR} @var{SINT_N} @var{OP}
@deffnx Builtin mmux_\STEM\_y0 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_y1 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_yn @var{ROPVAR} @var{SINT_N} @var{OP}
Compute the named C function.
@end deffn

@end macro

@c ------------------------------------------------------------------------

@macro MmuxDefineMathComplexBuiltins{STEM}
@deffn Builtin mmux_\STEM\_sin @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_cos @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_tan @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_asin @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_acos @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atan @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atan2 @var{ROPVAR} @vari{OP} @varii{OP}
@deffnx Builtin mmux_\STEM\_sinh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_cosh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_tanh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_asinh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_acosh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_atanh @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_exp @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_log10 @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_pow @var{ROPVAR} @var{OP}
@deffnx Builtin mmux_\STEM\_sqrt @var{ROPVAR} @var{OP}
Compute the named C function.
@end deffn

@end macro

@c ------------------------------------------------------------------------

@MmuxDefineMathRealBuiltins{float}
@MmuxDefineMathRealBuiltins{double}
@MmuxDefineMathRealBuiltins{ldouble}

@MmuxDefineMathRealBuiltins{float32}
@MmuxDefineMathRealBuiltins{float64}
@MmuxDefineMathRealBuiltins{float128}

@MmuxDefineMathRealBuiltins{float32x}
@MmuxDefineMathRealBuiltins{float64x}
@MmuxDefineMathRealBuiltins{float128x}

@ignore
@MmuxDefineMathRealBuiltins{decimal32}
@MmuxDefineMathRealBuiltins{decimal64}
@MmuxDefineMathRealBuiltins{decimal128}
@end ignore

@MmuxDefineMathComplexBuiltins{complexf}
@MmuxDefineMathComplexBuiltins{complexd}
@MmuxDefineMathComplexBuiltins{complexld}

@MmuxDefineMathComplexBuiltins{complexf32}
@MmuxDefineMathComplexBuiltins{complexf64}
@MmuxDefineMathComplexBuiltins{complexf128}

@MmuxDefineMathComplexBuiltins{complexf32x}
@MmuxDefineMathComplexBuiltins{complexf64x}
@MmuxDefineMathComplexBuiltins{complexf128x}

@ignore
@MmuxDefineMathComplexBuiltins{complexd32}
@MmuxDefineMathComplexBuiltins{complexd64}
@MmuxDefineMathComplexBuiltins{complexd128}
@end ignore

@c page
@node bitwise
@chapter Bitwise operation builtins


@gnu{} Bash already implements bitwise operations for integer values, and such implementation might
be preferable to the builtins implemented by @value{PACKAGE}.  Anyway, for completeness, the bitwise
operations are implemented for every supported data type.

@menu
* bitwise and::         Bitwise AND operation.
* bitwise or::          Bitwise OR operation.
* bitwise xor::         Bitwise XOR operation.
* bitwise not::         Bitwise NOT operation.
* bitwise shl::         Bitwise shift--left operation.
* bitwise shr::         Bitwise shift--right operation.
@end menu

@c page
@node bitwise and
@section Bitwise AND operation


@deffn Builtin mmux_pointer_bitwise_and @var{PTRVAR} @var{PTR} @var{MASK}
Compose a pointer value @var{PTR} with the exact unsigned integer value @var{MASK} using the bitwise
AND operation, then store the result in the variable @var{ROPVAR}; when successful: return true,
otherwise return false and set the shell variable @code{ERRNO} to the string representation of an
exact integer, itself representing an @code{errno} error code.

The argument @var{PTR} must be the string representation of a pointer value.

The argument @var{MASK} must be the string representation of a number of type @objtype{uintptr_t}.
@end deffn


For the following builtins, the bitwise AND operation is as follows:

@example
@var{ROP} = @varo{OP} & @var{OP} & @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the operation between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.

@macro MmuxDefineTypeBitwiseAndBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_and @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the bitwise AND operation between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeBitwiseAndBuiltin{schar}
@MmuxDefineTypeBitwiseAndBuiltin{uchar}
@MmuxDefineTypeBitwiseAndBuiltin{sshort}
@MmuxDefineTypeBitwiseAndBuiltin{ushort}
@MmuxDefineTypeBitwiseAndBuiltin{sint}
@MmuxDefineTypeBitwiseAndBuiltin{uint}
@MmuxDefineTypeBitwiseAndBuiltin{slong}
@MmuxDefineTypeBitwiseAndBuiltin{ulong}
@MmuxDefineTypeBitwiseAndBuiltin{sllong}
@MmuxDefineTypeBitwiseAndBuiltin{ullong}

@MmuxDefineTypeBitwiseAndBuiltin{sint8}
@MmuxDefineTypeBitwiseAndBuiltin{uint8}
@MmuxDefineTypeBitwiseAndBuiltin{sint16}
@MmuxDefineTypeBitwiseAndBuiltin{uint16}
@MmuxDefineTypeBitwiseAndBuiltin{sint32}
@MmuxDefineTypeBitwiseAndBuiltin{uint32}
@MmuxDefineTypeBitwiseAndBuiltin{sint64}
@MmuxDefineTypeBitwiseAndBuiltin{uint64}

@MmuxDefineTypeBitwiseAndBuiltin{ssize}
@MmuxDefineTypeBitwiseAndBuiltin{usize}
@MmuxDefineTypeBitwiseAndBuiltin{sintmax}
@MmuxDefineTypeBitwiseAndBuiltin{uintmax}
@MmuxDefineTypeBitwiseAndBuiltin{sintptr}
@MmuxDefineTypeBitwiseAndBuiltin{uintptr}
@MmuxDefineTypeBitwiseAndBuiltin{mode}
@MmuxDefineTypeBitwiseAndBuiltin{off}
@MmuxDefineTypeBitwiseAndBuiltin{pid}
@MmuxDefineTypeBitwiseAndBuiltin{uid}
@MmuxDefineTypeBitwiseAndBuiltin{gid}
@MmuxDefineTypeBitwiseAndBuiltin{wchar}
@MmuxDefineTypeBitwiseAndBuiltin{wint}

@c page
@node bitwise or
@section Bitwise OR operation


@deffn Builtin mmux_pointer_bitwise_or @var{PTRVAR} @var{PTR} @var{MASK}
Compose a pointer value @var{PTR} with the exact unsigned integer value @var{MASK} using the bitwise
OR operation, then store the result in the variable @var{ROPVAR}; when successful: return true,
otherwise return false and set the shell variable @code{ERRNO} to the string representation of an
exact integer, itself representing an @code{errno} error code.

The argument @var{PTR} must be the string representation of a pointer value.

The argument @var{MASK} must be the string representation of a number of type @objtype{uintptr_t}.
@end deffn


For the following builtins, the bitwise OR operation is as follows:

@example
@var{ROP} = @varo{OP} | @var{OP} | @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the operation between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.

@macro MmuxDefineTypeBitwiseOrBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_or @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the bitwise OR operation between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeBitwiseOrBuiltin{schar}
@MmuxDefineTypeBitwiseOrBuiltin{uchar}
@MmuxDefineTypeBitwiseOrBuiltin{sshort}
@MmuxDefineTypeBitwiseOrBuiltin{ushort}
@MmuxDefineTypeBitwiseOrBuiltin{sint}
@MmuxDefineTypeBitwiseOrBuiltin{uint}
@MmuxDefineTypeBitwiseOrBuiltin{slong}
@MmuxDefineTypeBitwiseOrBuiltin{ulong}
@MmuxDefineTypeBitwiseOrBuiltin{sllong}
@MmuxDefineTypeBitwiseOrBuiltin{ullong}

@MmuxDefineTypeBitwiseOrBuiltin{sint8}
@MmuxDefineTypeBitwiseOrBuiltin{uint8}
@MmuxDefineTypeBitwiseOrBuiltin{sint16}
@MmuxDefineTypeBitwiseOrBuiltin{uint16}
@MmuxDefineTypeBitwiseOrBuiltin{sint32}
@MmuxDefineTypeBitwiseOrBuiltin{uint32}
@MmuxDefineTypeBitwiseOrBuiltin{sint64}
@MmuxDefineTypeBitwiseOrBuiltin{uint64}

@MmuxDefineTypeBitwiseOrBuiltin{ssize}
@MmuxDefineTypeBitwiseOrBuiltin{usize}
@MmuxDefineTypeBitwiseOrBuiltin{sintmax}
@MmuxDefineTypeBitwiseOrBuiltin{uintmax}
@MmuxDefineTypeBitwiseOrBuiltin{sintptr}
@MmuxDefineTypeBitwiseOrBuiltin{uintptr}
@MmuxDefineTypeBitwiseOrBuiltin{mode}
@MmuxDefineTypeBitwiseOrBuiltin{off}
@MmuxDefineTypeBitwiseOrBuiltin{pid}
@MmuxDefineTypeBitwiseOrBuiltin{uid}
@MmuxDefineTypeBitwiseOrBuiltin{gid}
@MmuxDefineTypeBitwiseOrBuiltin{wchar}
@MmuxDefineTypeBitwiseOrBuiltin{wint}

@c page
@node bitwise xor
@section Bitwise XOR operation


@deffn Builtin mmux_pointer_bitwise_xor @var{PTRVAR} @var{PTR} @var{MASK}
Compose a pointer value @var{PTR} with the exact unsigned integer value @var{MASK} using the bitwise
XOR operation, then store the result in the variable @var{ROPVAR}; when successful: return true,
otherwise return false and set the shell variable @code{ERRNO} to the string representation of an
exact integer, itself representing an @code{errno} error code.

The argument @var{PTR} must be the string representation of a pointer value.

The argument @var{MASK} must be the string representation of a number of type @objtype{uintptr_t}.
@end deffn


For the following builtins, the bitwise XOR operation is as follows:

@example
@var{ROP} = @varo{OP} ^ @var{OP} ^ @dots{}
@end example

@noindent
and there can be any number of operands, depending on the capabilities of the underlying platform.

All the builtins perform the operation between the operands @var{OP}, of which @varo{OP} is
mandatory, then store a string representation of the result in the variable @var{ROPVAR}; when
successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The arguments @var{OP} must be string representations of values of the specific builtin type.  If
only @varo{OP} is present: the result is @varo{OP} itself.

@macro MmuxDefineTypeBitwiseXorBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_xor @var{ROPVAR} @varo{OP} @var{OP} @dots{}
Perform the bitwise XOR operation between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeBitwiseXorBuiltin{schar}
@MmuxDefineTypeBitwiseXorBuiltin{uchar}
@MmuxDefineTypeBitwiseXorBuiltin{sshort}
@MmuxDefineTypeBitwiseXorBuiltin{ushort}
@MmuxDefineTypeBitwiseXorBuiltin{sint}
@MmuxDefineTypeBitwiseXorBuiltin{uint}
@MmuxDefineTypeBitwiseXorBuiltin{slong}
@MmuxDefineTypeBitwiseXorBuiltin{ulong}
@MmuxDefineTypeBitwiseXorBuiltin{sllong}
@MmuxDefineTypeBitwiseXorBuiltin{ullong}

@MmuxDefineTypeBitwiseXorBuiltin{sint8}
@MmuxDefineTypeBitwiseXorBuiltin{uint8}
@MmuxDefineTypeBitwiseXorBuiltin{sint16}
@MmuxDefineTypeBitwiseXorBuiltin{uint16}
@MmuxDefineTypeBitwiseXorBuiltin{sint32}
@MmuxDefineTypeBitwiseXorBuiltin{uint32}
@MmuxDefineTypeBitwiseXorBuiltin{sint64}
@MmuxDefineTypeBitwiseXorBuiltin{uint64}

@MmuxDefineTypeBitwiseXorBuiltin{ssize}
@MmuxDefineTypeBitwiseXorBuiltin{usize}
@MmuxDefineTypeBitwiseXorBuiltin{sintmax}
@MmuxDefineTypeBitwiseXorBuiltin{uintmax}
@MmuxDefineTypeBitwiseXorBuiltin{sintptr}
@MmuxDefineTypeBitwiseXorBuiltin{uintptr}
@MmuxDefineTypeBitwiseXorBuiltin{mode}
@MmuxDefineTypeBitwiseXorBuiltin{off}
@MmuxDefineTypeBitwiseXorBuiltin{pid}
@MmuxDefineTypeBitwiseXorBuiltin{uid}
@MmuxDefineTypeBitwiseXorBuiltin{gid}
@MmuxDefineTypeBitwiseXorBuiltin{wchar}
@MmuxDefineTypeBitwiseXorBuiltin{wint}

@c page
@node bitwise not
@section Bitwise NOT operation


@deffn Builtin mmux_pointer_bitwise_not @var{PTRVAR} @var{PTR}
Perform the bitwise NOT operation on a pointer value @var{PTR}, then store the result in the
variable @var{ROPVAR}; when successful: return true, otherwise return false and set the shell
variable @code{ERRNO} to the string representation of an exact integer, itself representing an
@code{errno} error code.

The argument @var{PTR} must be the string representation of a pointer value.
@end deffn


For the following builtins, the bitwise NOT operation is as follows:

@example
@var{ROP} = ~ @var{OP}
@end example

@noindent

When successful: return true, otherwise return false and set the shell variable @code{ERRNO} to the
string representation of an exact integer, itself representing an @code{errno} error code.

The argument @var{OP} must be a string representation of a value of the specific builtin type.

@macro MmuxDefineTypeBitwiseNotBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_not @var{ROPVAR} @varo{OP}
Perform the bitwise NOT operation between values of type @code{\STEM\}.
@end deffn

@end macro

@MmuxDefineTypeBitwiseNotBuiltin{schar}
@MmuxDefineTypeBitwiseNotBuiltin{uchar}
@MmuxDefineTypeBitwiseNotBuiltin{sshort}
@MmuxDefineTypeBitwiseNotBuiltin{ushort}
@MmuxDefineTypeBitwiseNotBuiltin{sint}
@MmuxDefineTypeBitwiseNotBuiltin{uint}
@MmuxDefineTypeBitwiseNotBuiltin{slong}
@MmuxDefineTypeBitwiseNotBuiltin{ulong}
@MmuxDefineTypeBitwiseNotBuiltin{sllong}
@MmuxDefineTypeBitwiseNotBuiltin{ullong}

@MmuxDefineTypeBitwiseNotBuiltin{sint8}
@MmuxDefineTypeBitwiseNotBuiltin{uint8}
@MmuxDefineTypeBitwiseNotBuiltin{sint16}
@MmuxDefineTypeBitwiseNotBuiltin{uint16}
@MmuxDefineTypeBitwiseNotBuiltin{sint32}
@MmuxDefineTypeBitwiseNotBuiltin{uint32}
@MmuxDefineTypeBitwiseNotBuiltin{sint64}
@MmuxDefineTypeBitwiseNotBuiltin{uint64}

@MmuxDefineTypeBitwiseNotBuiltin{ssize}
@MmuxDefineTypeBitwiseNotBuiltin{usize}
@MmuxDefineTypeBitwiseNotBuiltin{sintmax}
@MmuxDefineTypeBitwiseNotBuiltin{uintmax}
@MmuxDefineTypeBitwiseNotBuiltin{sintptr}
@MmuxDefineTypeBitwiseNotBuiltin{uintptr}
@MmuxDefineTypeBitwiseNotBuiltin{mode}
@MmuxDefineTypeBitwiseNotBuiltin{off}
@MmuxDefineTypeBitwiseNotBuiltin{pid}
@MmuxDefineTypeBitwiseNotBuiltin{uid}
@MmuxDefineTypeBitwiseNotBuiltin{gid}
@MmuxDefineTypeBitwiseNotBuiltin{wchar}
@MmuxDefineTypeBitwiseNotBuiltin{wint}

@c page
@node bitwise shl
@section Bitwise shift--left operation


All the following builtins perform the bitwise shift--left operation on a value @var{OP}, shifting
by @var{NBITS}, then store the result in the variable @var{ROPVAR}; when successful: return true,
otherwise return false and set the shell variable @code{ERRNO} to the string representation of an
exact integer, itself representing an @code{errno} error code.

The argument @var{NBITS} must be the string representation of a @objtype{sint}.


@macro MmuxDefineTypeBitwiseShlBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_shl @var{ROPVAR} @var{OP} @var{NBITS}
Perform the bitwise shift--left operation on an operand of type \STEM\.
@end deffn

@end macro

@MmuxDefineTypeBitwiseShlBuiltin{schar}
@MmuxDefineTypeBitwiseShlBuiltin{uchar}
@MmuxDefineTypeBitwiseShlBuiltin{sshort}
@MmuxDefineTypeBitwiseShlBuiltin{ushort}
@MmuxDefineTypeBitwiseShlBuiltin{sint}
@MmuxDefineTypeBitwiseShlBuiltin{uint}
@MmuxDefineTypeBitwiseShlBuiltin{slong}
@MmuxDefineTypeBitwiseShlBuiltin{ulong}
@MmuxDefineTypeBitwiseShlBuiltin{sllong}
@MmuxDefineTypeBitwiseShlBuiltin{ullong}

@MmuxDefineTypeBitwiseShlBuiltin{sint8}
@MmuxDefineTypeBitwiseShlBuiltin{uint8}
@MmuxDefineTypeBitwiseShlBuiltin{sint16}
@MmuxDefineTypeBitwiseShlBuiltin{uint16}
@MmuxDefineTypeBitwiseShlBuiltin{sint32}
@MmuxDefineTypeBitwiseShlBuiltin{uint32}
@MmuxDefineTypeBitwiseShlBuiltin{sint64}
@MmuxDefineTypeBitwiseShlBuiltin{uint64}

@MmuxDefineTypeBitwiseShlBuiltin{ssize}
@MmuxDefineTypeBitwiseShlBuiltin{usize}
@MmuxDefineTypeBitwiseShlBuiltin{sintmax}
@MmuxDefineTypeBitwiseShlBuiltin{uintmax}
@MmuxDefineTypeBitwiseShlBuiltin{sintptr}
@MmuxDefineTypeBitwiseShlBuiltin{uintptr}
@MmuxDefineTypeBitwiseShlBuiltin{mode}
@MmuxDefineTypeBitwiseShlBuiltin{off}
@MmuxDefineTypeBitwiseShlBuiltin{pid}
@MmuxDefineTypeBitwiseShlBuiltin{uid}
@MmuxDefineTypeBitwiseShlBuiltin{gid}
@MmuxDefineTypeBitwiseShlBuiltin{wchar}
@MmuxDefineTypeBitwiseShlBuiltin{wint}

@c page
@node bitwise shr
@section Bitwise shift--right operation


All the following builtins perform the bitwise shift--right operation on a value @var{OP}, shifting
by @var{NBITS}, then store the result in the variable @var{ROPVAR}; when successful: return true,
otherwise return false and set the shell variable @code{ERRNO} to the string representation of an
exact integer, itself representing an @code{errno} error code.

The argument @var{NBITS} must be the string representation of a @objtype{sint}.


@macro MmuxDefineTypeBitwiseShrBuiltin{STEM}
@deffn Builtin mmux_\STEM\_bitwise_shr @var{ROPVAR} @var{OP} @var{NBITS}
Perform the bitwise shift--right operation on an operand of type \STEM\.
@end deffn

@end macro

@MmuxDefineTypeBitwiseShrBuiltin{schar}
@MmuxDefineTypeBitwiseShrBuiltin{uchar}
@MmuxDefineTypeBitwiseShrBuiltin{sshort}
@MmuxDefineTypeBitwiseShrBuiltin{ushort}
@MmuxDefineTypeBitwiseShrBuiltin{sint}
@MmuxDefineTypeBitwiseShrBuiltin{uint}
@MmuxDefineTypeBitwiseShrBuiltin{slong}
@MmuxDefineTypeBitwiseShrBuiltin{ulong}
@MmuxDefineTypeBitwiseShrBuiltin{sllong}
@MmuxDefineTypeBitwiseShrBuiltin{ullong}

@MmuxDefineTypeBitwiseShrBuiltin{sint8}
@MmuxDefineTypeBitwiseShrBuiltin{uint8}
@MmuxDefineTypeBitwiseShrBuiltin{sint16}
@MmuxDefineTypeBitwiseShrBuiltin{uint16}
@MmuxDefineTypeBitwiseShrBuiltin{sint32}
@MmuxDefineTypeBitwiseShrBuiltin{uint32}
@MmuxDefineTypeBitwiseShrBuiltin{sint64}
@MmuxDefineTypeBitwiseShrBuiltin{uint64}

@MmuxDefineTypeBitwiseShrBuiltin{ssize}
@MmuxDefineTypeBitwiseShrBuiltin{usize}
@MmuxDefineTypeBitwiseShrBuiltin{sintmax}
@MmuxDefineTypeBitwiseShrBuiltin{uintmax}
@MmuxDefineTypeBitwiseShrBuiltin{sintptr}
@MmuxDefineTypeBitwiseShrBuiltin{uintptr}
@MmuxDefineTypeBitwiseShrBuiltin{mode}
@MmuxDefineTypeBitwiseShrBuiltin{off}
@MmuxDefineTypeBitwiseShrBuiltin{pid}
@MmuxDefineTypeBitwiseShrBuiltin{uid}
@MmuxDefineTypeBitwiseShrBuiltin{gid}
@MmuxDefineTypeBitwiseShrBuiltin{wchar}
@MmuxDefineTypeBitwiseShrBuiltin{wint}

@c page
@node formats
@chapter Input and output formats


@menu
* formats float::       Selecting the printing format for floating--point numbers.
@end menu

@c page
@node formats float
@section Selecting the printing format for floating--point numbers


@cindex Printing format for floating--point numbers
@cindex Formatting floating--point numbers


To select an output format for the result of operations, we do:

@example
declare OLD_FORMAT ROP OP1='123.4' OP2='567.8'

mmux_double_set_format '%g' OLD_FORMAT
@{
    mmux_double_add ROP "$OP1" "$OP2"
@}
mmux_double_set_format "$OLD_FORMAT"

"$ROP"  @result{} 6.912000e+02
@end example

To query the currently selected output format for the result of operations:

@example
declare CURRENT_FORMAT

mmux_double_ref_format CURRENT_FORMAT
"$CURRENT_FORMAT"       @result{} "%A"
@end example

If we just want to reformat a number we do:

@example
declare OP='123.4567890'

mmux_double_reformat OP '%g' "$OP"
"$OP"   @result{} 1.234568e+02
@end example

The string representation of exact integers is an acceptable format for floating--point numbers: we
can use the formatting capabilities implemented for floating--point numbers to format exact
integers.

String representations of complex floating--point numbers are composed using the format selected for
the corresponding real floating--point type.

For the following builtins:

@itemize
@item
The argument @var{OUTPUT_FORMAT} must be a string compatible with the @cfunc{printf} format
selection for floating--point numbers.  Each supported type may have limitations in the available
format.

@item
The optional argument @var{OLD_FORMAT_VAR} must be a shell variable name in which the builtin will
store the old output format, so that: it is possible to temporarily select a new format, then
restore the old one.

@item
The argument @var{CURRENT_FORMAT_VAR} must be a shell variable name in which the builtin will store
the currently selected output format.
@end itemize

@quotation
@strong{NOTE} We should be careful @strong{not} to select a field width of zero; that is, to avoid
formats like @samp{%0e}.
@end quotation


@c ------------------------------------------------------------------------

@macro MmuxRealSelectOutputFormatBuiltin{STEM,DEFAULTFORMAT}
@deffn Builtin mmux_\STEM\_set_format @var{OUTPUT_FORMAT}
@deffnx Builtin mmux_\STEM\_set_format @var{OUTPUT_FORMAT} @var{OLD_FORMAT_VAR}
@deffnx Builtin mmux_\STEM\_ref_format @var{CURRENT_FORMAT_VAR}
@deffnx Builtin mmux_\STEM\_reformat @var{OUTPUTVAR} @var{OUTPUT_FORMAT} @var{INPUT_NUMBER}
Select or retrieve the format for string representations of floating--point numbers of type
@objtype{\STEM\}.  The default format is @samp{\DEFAULTFORMAT\}.
@end deffn

@end macro

@MmuxRealSelectOutputFormatBuiltin{float, %A}
@MmuxRealSelectOutputFormatBuiltin{double, %A}
@MmuxRealSelectOutputFormatBuiltin{ldouble, %A}

@MmuxRealSelectOutputFormatBuiltin{float32, %A}
@MmuxRealSelectOutputFormatBuiltin{float64, %A}
@MmuxRealSelectOutputFormatBuiltin{float128, %A}

@MmuxRealSelectOutputFormatBuiltin{float32x, %A}
@MmuxRealSelectOutputFormatBuiltin{float64x, %A}
@MmuxRealSelectOutputFormatBuiltin{float128x, %A}

@MmuxRealSelectOutputFormatBuiltin{decimal32, %f}
@MmuxRealSelectOutputFormatBuiltin{decimal64, %f}
@MmuxRealSelectOutputFormatBuiltin{decimal128, %f}

@c ------------------------------------------------------------------------

@macro MmuxComplexReformatBuiltin{STEM}
@deffn Builtin mmux_\STEM\_reformat @var{OUTPUTVAR} @var{OUTPUT_FORMAT} @var{INPUT_NUMBER}
Reformat a complex floating--point number of type @objtype{\STEM\}.
@end deffn

@end macro

@MmuxComplexReformatBuiltin{complexf}
@MmuxComplexReformatBuiltin{complexd}
@MmuxComplexReformatBuiltin{complexld}

@MmuxComplexReformatBuiltin{complexf32}
@MmuxComplexReformatBuiltin{complexf64}
@MmuxComplexReformatBuiltin{complexf128}

@MmuxComplexReformatBuiltin{complexf32x}
@MmuxComplexReformatBuiltin{complexf64x}
@MmuxComplexReformatBuiltin{complexf128x}

@MmuxComplexReformatBuiltin{complexf32}
@MmuxComplexReformatBuiltin{complexd64}
@MmuxComplexReformatBuiltin{complexd128}

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

the package @code{libdfp} is available online:

@center @url{https://github.com/libdfp/libdfp}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

